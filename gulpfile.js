// Generated by CoffeeScript 1.7.1
(function() {
  var autoprefixer, bump, cache, coffee, coffeelint, compileInPlace, concat, debug, extended, files, git, gulp, gutil, header, imagemin, inject, injectTask, lr, minifyCss, notify, path, paths, pkg, plugins, qunit, rename, server, sourceMaps, succint, uglify, watch, wiredep, wiredepStream;

  gulp = require('gulp');

  autoprefixer = require('gulp-autoprefixer');

  minifyCss = require('gulp-minify-css');

  uglify = require('gulp-uglify');

  gutil = require('gulp-util');

  imagemin = require('gulp-imagemin');

  rename = require('gulp-rename');

  concat = require('gulp-concat');

  notify = require('gulp-notify');

  cache = require('gulp-cache');

  lr = require('tiny-lr');

  plugins = require('gulp-load-plugins');

  path = require('path');

  wiredep = require('wiredep');

  wiredepStream = wiredep.stream;

  coffee = require('gulp-coffee');

  coffeelint = require('gulp-coffeelint');

  debug = require('gulp-debug');

  inject = require('gulp-inject');

  git = require('gulp-git');

  bump = require('gulp-bump');

  qunit = require('gulp-qunit');

  header = require('gulp-header');

  watch = require('gulp-watch');

  sourceMaps = require('gulp-sourcemaps');

  server = lr();

  pkg = require('./package.json');

  extended = ['/**', ' * <%= pkg.name %> - <%= pkg.description %>', ' * @version v<%= pkg.version %>', ' * @link <%= pkg.homepage %>', ' * @license <%= pkg.license %>', ' */', ''].join('\n');

  succint = '// <%= pkg.name %>@v<%= pkg.version %>, <%= pkg.license %> licensed. <%= pkg.homepage %>\n';

  paths = {
    css: './src/css',
    js: './src/coffee',
    release: './dist',
    lib: './bower_components',
    coffee: './src/coffee',
    src: './src',
    test: './test'
  };

  files = {
    index: './dist/release.html',
    devIndex: './src/dev.html',
    testIndex: './test/test.html',
    testIndexCoffee: './test/test.coffee.html',
    css: './src/css/**/*.css',
    js: './src/coffee/**/*.js',
    coffee: './src/coffee/**/*.coffee',
    test: './test/**/*.coffee',
    testJs: './test/**/*.js'
  };

  injectTask = function(path, pageName, sourceFiles) {
    if (path == null) {
      path = '';
    }
    if (pageName == null) {
      pageName = '';
    }
    if (sourceFiles == null) {
      sourceFiles = [];
    }
    return gulp.src(path + '/' + pageName + '.tmpl').pipe(rename({
      extname: '.html'
    })).pipe(inject(gulp.src(sourceFiles, {
      read: false
    }), {
      addRootSlash: false,
      addPrefix: '..'
    })).pipe(wiredepStream({
      exclude: [/backbone/, /underscore/, /require/]
    })).pipe(gulp.dest(path)).pipe(notify({
      message: pageName + '.html includes dynamically injected.'
    })).on('error', gutil.log);
  };

  gulp.task('inject', function() {
    injectTask('./src', 'dev', [files.js, files.css]);
    injectTask('./test', 'test', [files.js, files.testJs, files.css]);
    injectTask('./dist', 'release', ['./dist/**/*.min*']);
  });

  compileInPlace = function(files) {
    return gulp.src(files, {
      base: './'
    }).pipe(sourceMaps.init()).pipe(coffee({
      map: true,
      m: true
    })).pipe(sourceMaps.write('./')).pipe(gulp.dest('./'));
  };


  /* 
  Compile and Minify CoffeeScript to JS
   */

  gulp.task('coffee', function() {
    compileInPlace(files.coffee);
    compileInPlace('./test/**/*.coffee');
    gulp.src(files.coffee).pipe(coffee({
      map: true
    })).pipe(concat('OJ.js')).pipe(header(extended, {
      pkg: pkg
    })).pipe(gulp.dest(paths.release)).pipe(rename({
      suffix: '.min'
    })).pipe(uglify({
      outSourceMap: true
    })).pipe(header(succint, {
      pkg: pkg
    })).pipe(gulp.dest(paths.release)).pipe(notify({
      message: 'CoffeeScript to JS compilation complete.'
    })).on('error', gutil.log);
  });


  /*
   Bump the version in bower and package json
   */

  gulp.task('bumpVersion', function() {
    gulp.src(['./package.json', './bower.json']).pipe(bump()).pipe(gulp.dest('./'));
  });


  /*
   Tag the repo with a version
   */

  gulp.task('tag', function() {
    var message, v;
    v = 'v' + pkg.version;
    message = 'Release ' + v;
    git.add();
    git.commit(message);
    git.tag(v, message);
    git.push('origin', 'master');
  });

  gulp.task('npm', function(done) {
    require('child_process').spawn('npm', ['publish'], {
      stdio: 'inherit'
    }).on('close', done).on('error', gutil.log);
  });

  gulp.task('watch', function() {
    gulp.watch(files.coffee, ['compile']);
    gulp.watch(files.test, ['compile']);
    gulp.watch(files.css, ['compile']);
  });

  gulp.task('test', function() {
    return gulp.src('./test/test.html').pipe(qunit());
  });

  gulp.task('compile', ['coffee', 'inject']);

  gulp.task('build', ['compile', 'watch']);

  gulp.task('default', ['build']);

  gulp.task('bump', ['bumpVersion', 'compile']);

}).call(this);

//# sourceMappingURL=gulpfile.js.map