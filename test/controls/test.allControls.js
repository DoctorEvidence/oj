// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    module('all controls', {
      setup: function() {
        OJ['GENERATE_UNIQUE_IDS'] = true;
        if (!OJ.body.make) {
          return OJ.nodes.div();
        }
      }
    });
    test('Test all controls', function() {
      var count;
      count = 0;
      OJ.each(OJ.controls.members, function(val, key) {
        if (key !== 'factory' && key !== 'makeSubNameSpace' && key !== 'constants') {
          return count += 1;
        }
      });
      expect(count * 7);
      OJ.each(OJ.controls.members, function(val, key) {
        var cNode, child, childId, dNode, node, nodeId;
        if (key !== 'factory' && key !== 'makeSubNameSpace' && key !== 'constants') {
          node = OJ.body.make(key);
          node.text('Hi I\'m some text');
          deepEqual(node.controlName, val, 'Control is a ' + key.toUpperCase());
          nodeId = node.getId();
          dNode = document.getElementById(nodeId);
          ok(dNode, 'Node is in the DOM');
          deepEqual(nodeId, dNode.id, 'Element IDs are equal');
          child = node.make(key);
          childId = child.getId();
          deepEqual(child.controlName, val, 'Control is a ' + key.toUpperCase());
          cNode = document.getElementById(childId);
          deepEqual(cNode.id, childId, 'Element IDs are equal');
          node.remove();
          equal(undefined, document.getElementById(nodeId), 'Node has been removed');
          return equal(undefined, document.getElementById(childId), 'Child has been removed');
        }
      });
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=test.allControls.map
