{"ts":1359428528359,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"// monad.js\r\n// Douglas Crockford\r\n// 2013-01-26\r\n\r\n// Public Domain\r\n\r\n// The MONAD function is a macroid that produces monad constructor functions.\r\n// It can take an optional modifier function, which is a function that is\r\n// allowed to modify new monads at the end of the construction processes.\r\n\r\n// A monad constructor (sometimes called 'unit' or 'return' in some mythologies)\r\n// comes with three methods, lift, lift_value, and method, all of which can add\r\n// methods and properties to the monad's prototype.\r\n\r\n// A monad has a 'bind' method that takes a function that receives a value and\r\n// is usually expected to return a monad.\r\n\r\n//    var identity = MONAD();\r\n//    var monad = identity(\"Hello world.\");\r\n//    monad.bind(alert);\r\n\r\n//    var ajax = MONAD()\r\n//        .lift('alert', alert);\r\n//    var monad = ajax(\"Hello world.\");\r\n//    monad.alert();\r\n\r\n//    var maybe = MONAD(function (monad, value) {\r\n//        if (value === null || value === undefined) {\r\n//            monad.is_null = true;\r\n//            monad.bind = function () {\r\n//                return monad;\r\n//            };\r\n//            return null;\r\n//        }\r\n//        return value;\r\n//    });\r\n//    var monad = maybe(null);\r\n//    monad.bind(alert);    // Nothing happens.\r\n\r\nfunction MONAD(modifier) {\r\n    'use strict';\r\n\r\n// Each unit constructor has a monad prototype. The prototype will contain an\r\n// is_monad property for classification, as well as all inheritable methods.\r\n\r\n    var prototype = Object.create(null);\r\n    prototype.is_monad = true;\r\n\r\n// Each call to MONAD will produce a new unit constructor function.\r\n\r\n    function unit(value) {\r\n\r\n// Construct a new monad.\r\n\r\n        var monad = Object.create(prototype);\r\n\r\n// In some mythologies 'bind' is called 'pipe' or '>>='.\r\n// The bind method will deliver the unit's value parameter to a function.\r\n\r\n        monad.bind = function (func, args) {\r\n\r\n// bind takes a function and an optional array of arguments. It calls that\r\n// function passing the monad's value and bind's optional array of args.\r\n\r\n// With ES6, this horrible return statement can be replaced with\r\n\r\n//          return func(value, ...args);\r\n\r\n            return func.apply(\r\n                undefined,\r\n                [value].concat(Array.prototype.slice.apply(args || []))\r\n            );\r\n        };\r\n\r\n// If MONAD's modifier parameter is a function, then call it, passing the monad\r\n// and the value.\r\n\r\n        if (typeof modifier === 'function') {\r\n            value = modifier(monad, value);\r\n        }\r\n\r\n// Return the shiny new monad.\r\n\r\n        return monad;\r\n    }\r\n    unit.method = function (name, func) {\r\n\r\n// Add a method to the prototype.\r\n\r\n        prototype[name] = func;\r\n        return unit;\r\n    };\r\n    unit.lift_value = function (name, func) {\r\n\r\n// Add a method to the prototype that calls bind with the func. This can be\r\n// used for ajax methods that return values other than monads.\r\n\r\n        prototype[name] = function () {\r\n            return this.bind(func, arguments);\r\n        };\r\n        return unit;\r\n    };\r\n    unit.lift = function (name, func) {\r\n\r\n// Add a method to the prototye that calls bind with the func. If the value\r\n// returned by the func is not a monad, then make a monad.\r\n\r\n        prototype[name] = function () {\r\n            var result = this.bind(func, arguments);\r\n            return result && result.is_monad === true ? result : unit(result);\r\n        };\r\n        return unit;\r\n    };\r\n    return unit;\r\n}\r\n"]],"start1":0,"start2":0,"length1":0,"length2":3504}]],"length":3504}
