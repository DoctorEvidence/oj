{"ts":1359428012152,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*global OJ:true*/\n(function() {\n\n    OJ.delimitedString = OJ.delimitedString ||\n        OJ.lift('delimitedString', function (string, opts) {\n            var ojInternal = {\n                newLineToDelimiter: true,\n                spaceToDelimiter: true,\n                removeDuplicates: true,\n                delimiter: ',',\n                initString: OJ.to.string(string)\n            };\n\n            var ojReturn = {\n                array: [],\n                delimited: function () {\n                    return ojReturn.array.join(ojInternal.delimiter);\n                },\n                string: function (delimiter) {\n                    delimiter = delimiter || ojInternal.delimiter;\n                    var ret = '';\n                    OJ.each(ojReturn.array, function (val) {\n                        if (ret.length > 0) {\n                            ret += delimiter;\n                        }\n                        ret += val;\n                    });\n                    return ret;\n                },\n                toString: function () {\n                    return ojReturn.string();\n                },\n                add: function (str) {\n                    ojReturn.array.push(ojInternal.parse(str));\n                    ojInternal.deleteDuplicates();\n                    return ojReturn;\n                },\n                remove: function (str) {\n                    var remove = function (array) {\n                        return array.filter(function (item) {\n                            if (item !== str) {\n                                return true;\n                            }\n                        });\n                    };\n                    ojReturn.array = remove(ojReturn.array);\n                    return ojReturn;\n                },\n                count: function() {\n                    return ojReturn.array.length;\n                },\n                contains: function (str, caseSensitive) {\n                    var isCaseSensitive = OJ.to.bool(caseSensitive);\n                    str = OJ.string(str).trim();\n                    if (false === isCaseSensitive) {\n                        str = str.toLowerCase();\n                    }\n                    var match = ojReturn.array.filter(function (matStr) {\n                        return ((isCaseSensitive && OJ.to.string(matStr).trim() === str) || OJ.to.string(matStr).trim().toLowerCase() === str);\n                    });\n                    return match.length > 0;\n                },\n                each: function(callBack) {\n                    return ojReturn.array.forEach(callBack);\n                }\n            };\n\n            ojInternal.parse = function (str) {\n                var ret = OJ.to.string(str);\n\n                if (ojInternal.newLineToDelimiter) {\n                    while (ret.indexOf('\\n') !== -1) {\n                        ret = ret.replace(/\\n/g, ojInternal.delimiter);\n                    }\n                }\n                if (ojInternal.spaceToDelimiter) {\n                    while (ret.indexOf(' ') !== -1) {\n                        ret = ret.replace(/ /g, ojInternal.delimiter);\n                    }\n                }\n                while (ret.indexOf(',,') !== -1) {\n                    ret = ret.replace(/,,/g, ojInternal.delimiter);\n                }\n                return ret;\n            };\n\n            ojInternal.deleteDuplicates = function () {\n                if (ojInternal.removeDuplicates) {\n                    (function () {\n\n                        var unique = function (array) {\n                            var seen = new Set;\n                            return array.filter(function (item) {\n                                if (false === seen.has(item)) {\n                                    seen.add(item);\n                                    return true;\n                                }\n                            });\n                        };\n\n                        ojReturn.array = unique(ojReturn.array);\n                    }());\n                }\n            };\n\n            (function (a) { \n                if (a.length > 1 && false === OJ.is.plainObject(opts)) {\n                    OJ.each(a, function (val) {\n                        if (false === OJ.is.nullOrEmpty(val)) {\n                            ojReturn.array.push(val);\n                        }\n                    });\n                } else if(string && string.length > 0) {\n                    OJ.extend(ojInternal, opts);\n                    var delimitedString = ojInternal.parse(string);\n                    ojInternal.initString = delimitedString;\n                    ojReturn.array = delimitedString.split(ojInternal.delimiter);\n                }\n\n                ojInternal.deleteDuplicates();\n            }(arguments));\n            return ojReturn;\n        });\n}());"]],"start1":0,"start2":0,"length1":0,"length2":4807}]],"length":4807}
{"contributors":[],"silentsave":true,"ts":1359428036497,"patch":[[{"diffs":[[0," new Set"],[1,"()"],[0,";\n      "]],"start1":3573,"start2":3573,"length1":16,"length2":18}]],"length":4809,"saved":false}
{"ts":1359428038494,"patch":[[{"diffs":[[0,"on (a) {"],[-1," "],[0,"\n       "]],"start1":4054,"start2":4054,"length1":17,"length2":16}]],"length":4808,"saved":false}
