// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var events, getEventName, publish, subscribe, subscribers, tokens, unsubscribe, unsubscribeAll, unsubscribeEvent;
    tokens = {};
    subscribers = [];
    events = {};
    getEventName = function(event) {
      return event.toUpperCase().replace(' ', '_');
    };
    subscribe = function(event, method) {
      var eventName, token;
      eventName = getEventName(event);
      if (!events[eventName]) {
        events[eventName] = [];
      }
      token = PubSub.subscribe(eventName, method);
      tokens[token] = token;
      subscribers.push(method);
      events[eventName].push(method);
      return token;
    };
    publish = function(event) {
      var eventName;
      eventName = getEventName(event);
      if (events[eventName]) {
        PubSub.publish(eventName);
      } else {
        OJ.console.info('Event named {' + event + '} is not recognized.');
      }
    };
    unsubscribe = function(tokenOrMethod) {
      if (OJ.is["function"](tokenOrMethod)) {
        if (-1 !== subscribers.indexOf(tokenOrMethod)) {
          PubSub.unsubscribe(tokenOrMethod);
          subscribers = _.remove(subscribers, function(method) {
            return method === tokenOrMethod;
          });
        } else {
          OJ.console.info('Event method is not recognized.');
        }
      } else {
        if (tokens[tokenOrMethod]) {
          PubSub.unsubscribe(tokenOrMethod);
          delete tokens[tokenOrMethod];
        }
      }
    };
    unsubscribeAll = function() {
      OJ.each(tokens, function(token) {
        return unsubscribe(token);
      });
      subscribers = [];
      events = {};
    };
    unsubscribeEvent = function(event) {
      var eventName;
      eventName = getEventName(event);
      if (events[eventName]) {
        OJ.each(events[eventName], function(method) {
          return unsubscribe(method);
        });
      } else {
        OJ.console.info('Event named {' + event + '} is not recognized.');
      }
      delete events[eventName];
    };
    OJ.register('publish', publish);
    OJ.register('subscribe', subscribe);
    OJ.register('unsubscribe', unsubscribe);
    OJ.register('unsubscribeAll', unsubscribeAll);
    OJ.register('unsubscribeEvent', unsubscribeEvent);
  })((typeof global !== 'undefined' && global ? global : typeof window !== 'undefined' ? window : this).OJ);

}).call(this);

//# sourceMappingURL=pubsub.map
