// Generated by CoffeeScript 1.7.1
(function() {
  (function() {
    'use strict';
    var cacheDbMgr, cacheExists, getCachedWebServiceCall, makeCachedCall, setCachedWebServiceCall, thisCustomerId, thisUserName, validate;
    cacheDbMgr = null;
    thisCustomerId = "";
    thisUserName = "";

    /*
    All paramaters are required
     */
    validate = function(customerId, userName, webServiceName) {
      thisCustomerId = customerId || (thisCustomerId = OJ.session.currentAccessId());
      thisUserName = userName || (thisUserName = OJ.session.currentUserName());
      if (!thisCustomerId) {
        throw new Error("Customer ID is required.");
      }
      if (!thisUserName) {
        throw new Error("User Name is required.");
      }
      if (!webServiceName) {
        throw new Error("Web Service Name is required.");
      }
    };

    /*
    Make a cached call for insert
     */
    makeCachedCall = function(webServiceName, data) {
      return {
        message: {
          dateTime: new Date(),
          cache: {
            customerId: thisCustomerId,
            userName: thisUserName,
            webServiceName: webServiceName
          },
          data: data
        }
      };
    };
    getCachedWebServiceCall = function(webServiceName, customerId, userName) {
      var deferred, promise, ret;
      deferred = Q.defer();
      ret = void 0;
      customerId = customerId || thisCustomerId;
      userName = userName || thisUserName;
      if (null === cacheDbMgr) {
        deferred.resolve(OJ.object());
        ret = deferred.promise;
      } else {
        validate(customerId, userName, webServiceName);
        promise = cacheDbMgr.select.from("CachedData", "uniqueCalls", [webServiceName, thisUserName, thisCustomerId]);
        ret = promise.then(function(data) {
          if (data && data.length > 0) {
            return data[0].data;
          }
        });
      }
      return ret;
    };
    OJ.register("getCachedWebServiceCall", getCachedWebServiceCall);
    setCachedWebServiceCall = function(webServiceName, data, customerId, userName) {
      var deferred, ret;
      deferred = Q.defer();
      customerId = customerId || thisCustomerId;
      userName = userName || thisUserName;
      ret = void 0;
      if (null === cacheDbMgr) {
        deferred.resolve(OJ.object());
        ret = deferred.promise;
      } else {
        validate(customerId, userName, webServiceName);
        ret = cacheDbMgr.update("CachedData", "uniqueCalls", [webServiceName, thisUserName, thisCustomerId], {
          data: data
        });
        ret.then(function(updatedRows) {
          var cachedCall;
          if (!updatedRows || updatedRows.length === 0) {
            cachedCall = makeCachedCall(webServiceName, data);
            return cacheDbMgr.insert("CachedData", cachedCall);
          }
        });
      }
      return ret;
    };
    OJ.register("setCachedWebServiceCall", setCachedWebServiceCall);
    cacheExists = function() {
      return cacheDbMgr !== undefined;
    };
    OJ.register("cacheExists", cacheExists);
    OJ.main.onReady.then(function() {
      thisCustomerId = OJ.session.currentAccessId() || "offline";
      thisUserName = OJ.session.currentUserName() || "offline";
      if (window.Modernizr.indexeddb && false === OJ.browserCompatibility.usingIE10()) {
        cacheDbMgr = OJ.db.dbManager("OJLive", 1);
        cacheDbMgr.ddl.createTable("CachedData", "CachedDataId", true);
        cacheDbMgr.ddl.createIndex("CachedData", "customerId", "cache.customerId");
        cacheDbMgr.ddl.createIndex("CachedData", "dateTimeId", "dateTime");
        cacheDbMgr.ddl.createIndex("CachedData", "userNameId", "cache.userName");
        cacheDbMgr.ddl.createIndex("CachedData", "webServiceNameId", "cache.webServiceName");
        cacheDbMgr.ddl.createIndex("CachedData", "uniqueCalls", ["cache.webServiceName", "cache.userName", "cache.customerId"], true);
      }
    });
  })();

}).call(this);

//# sourceMappingURL=clientDb.map
