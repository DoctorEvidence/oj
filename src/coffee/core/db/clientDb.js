// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    'use strict';
    var cacheDbMgr, cacheExists, getCachedResponse, makeCachedCall, setCachedWebResponse, thisUserName, validate;
    cacheDbMgr = null;
    thisUserName = '';

    /*
    All paramaters are required
     */
    validate = function(userName, webServiceName) {
      thisUserName = userName || thisUserName;
      if (!thisUserName) {
        throw new Error('User Name is required.');
      }
      if (!webServiceName) {
        throw new Error('Web Service Name is required.');
      }
    };

    /*
    Make a cached call for insert
     */
    makeCachedCall = function(webServiceName, data) {
      return {
        message: {
          dateTime: new Date(),
          cache: {
            userName: thisUserName,
            webServiceName: webServiceName
          },
          data: data
        }
      };
    };
    getCachedResponse = function(webServiceName, userName) {
      var deferred, promise, ret;
      deferred = Q.defer();
      ret = void 0;
      userName = userName || thisUserName;
      if (null === cacheDbMgr) {
        deferred.resolve(OJ.object());
        ret = deferred.promise;
      } else {
        validate(userName, webServiceName);
        promise = cacheDbMgr.select.from('CachedData', 'uniqueCalls', [webServiceName, thisUserName]);
        ret = promise.then(function(data) {
          if (data && data.length > 0) {
            return data[0].data;
          }
        });
      }
      return ret;
    };
    OJ.register('getCachedResponse', getCachedResponse);
    setCachedWebResponse = function(webServiceName, data, customerId, userName) {
      var deferred, ret;
      deferred = Q.defer();
      customerId = customerId || thisCustomerId;
      userName = userName || thisUserName;
      ret = void 0;
      if (null === cacheDbMgr) {
        deferred.resolve(OJ.object());
        ret = deferred.promise;
      } else {
        validate(customerId, userName, webServiceName);
        ret = cacheDbMgr.update('CachedData', 'uniqueCalls', [webServiceName, thisUserName, thisCustomerId], {
          data: data
        });
        ret.then(function(updatedRows) {
          var cachedCall;
          if (!updatedRows || updatedRows.length === 0) {
            cachedCall = makeCachedCall(webServiceName, data);
            return cacheDbMgr.insert('CachedData', cachedCall);
          }
        });
      }
      return ret;
    };
    OJ.register('setCachedWebResponse', setCachedWebResponse);
    cacheExists = function() {
      return cacheDbMgr !== undefined;
    };
    OJ.register('cacheExists', cacheExists);
    OJ.register('initDb', function(userName) {
      if (userName == null) {
        userName = 'offline';
      }
      thisUserName = userName;
      if (window.Modernizr.indexeddb) {
        cacheDbMgr = OJ.db.dbManager('ojdb', 1);
        cacheDbMgr.ddl.createTable('CachedData', 'CachedDataId', true);
        cacheDbMgr.ddl.createIndex('CachedData', 'dateTimeId', 'dateTime');
        cacheDbMgr.ddl.createIndex('CachedData', 'userNameId', 'cache.userName');
        cacheDbMgr.ddl.createIndex('CachedData', 'webServiceNameId', 'cache.webServiceName');
        cacheDbMgr.ddl.createIndex('CachedData', 'uniqueCalls', ['cache.webServiceName', 'cache.userName'], true);
      }
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=clientDb.map
