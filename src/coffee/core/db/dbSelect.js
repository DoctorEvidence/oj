// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var onError, selectAll, selectAllImpl, selectFrom, selectFromImpl;
    OJ.db.makeSubNameSpace('select');
    onError = function(eventObj) {
      OJ.debug.error(eventObj.target.error);
      return new Error(eventObj.target.error);
    };
    selectAllImpl = function(dbManager, tableName, ret) {
      var deferred, doSelect;
      deferred = Q.defer();
      doSelect = function() {
        var e, objectStore, selRequest, transaction;
        try {
          transaction = dbManager.getDb().transaction([tableName]);
          objectStore = transaction.objectStore(tableName);
          ret = ret || [];
          selRequest = objectStore.openCursor();
          selRequest.onsuccess = function(event) {
            var cursor;
            cursor = event.target.result;
            if (cursor) {
              ret.push(cursor.value);
              cursor['continue']();
            } else {
              deferred.resolve(ret);
            }
          };
          selRequest.onerror = function(eventObj) {
            deferred.reject(onError(eventObj));
          };
        } catch (_error) {
          e = _error;
          console.log(e, e.stack);
          deferred.reject(new Error('Could not select records', e));
        }
        return deferred.promise;
      };
      dbManager.promises.connect.then(doSelect, function() {
        deferred.reject();
      });
      return deferred.promise;
    };
    selectAll = function(dbWrapper, tableName) {
      var promise, ret;
      ret = [];
      promise = selectAllImpl(dbWrapper, tableName, ret);
      promise['return'] = ret;
      return promise;
    };
    OJ.db.select.register('all', selectAll);
    selectFromImpl = function(dbManager, tableName, indexName, indexVal, ret) {
      var deferred, doSelect;
      deferred = Q.defer();
      doSelect = function() {
        var e, index, keyRange, objectStore, selRequest, transaction;
        try {
          transaction = dbManager.getDb().transaction([tableName]);
          objectStore = transaction.objectStore(tableName);
          index = objectStore.index(indexName);
          ret = ret || [];
          keyRange = void 0;
          if (indexVal) {
            keyRange = IDBKeyRange.only(indexVal);
          }
          selRequest = index.openCursor(keyRange);
          selRequest.onsuccess = function(event) {
            var cursor;
            cursor = event.target.result;
            if (cursor) {
              ret.push(cursor.value);
              cursor['continue']();
            } else {
              deferred.resolve(ret);
            }
          };
          selRequest.onerror = function(eventObj) {
            deferred.reject(onError(eventObj));
          };
        } catch (_error) {
          e = _error;
          console.log(e, e.stack);
          deferred.reject(new Error('Could not select records', e));
        }
        return deferred.promise;
      };
      dbManager.promises.connect.then(doSelect, function() {
        deferred.reject();
      });
      return deferred.promise;
    };
    OJ.db.select.register('from', selectFrom = function(dbWrapper, tableName, indexName, indexVal) {
      var promise, ret;
      ret = [];
      promise = selectFromImpl(dbWrapper, tableName, indexName, indexVal, ret);
      promise['return'] = ret;
      return promise;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=dbSelect.js.map