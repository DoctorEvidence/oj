// Generated by CoffeeScript 1.7.1
(function() {
  (function() {
    'use strict';
    var dbManager;
    dbManager = function(name, version) {
      var connect, disconnect, isNewConnectionRequired, ret, schemaScripts, select;
      ret = OJ.object();
      ret.add("promises", OJ.object());
      isNewConnectionRequired = false;
      schemaScripts = [];
      connect = function(dbName, dbVersion, dbOnUpgrade) {
        var deferred, request;
        isNewConnectionRequired = !ret.promises.connect || dbName !== name || dbVersion !== version;
        if (isNewConnectionRequired) {
          deferred = Q.defer();
          ret.promises.connect = deferred.promise;
          version = dbVersion || 1;
          name = dbName;
          dbOnUpgrade = dbOnUpgrade || function() {};
          request = window.indexedDB.open(name, version);
          request.onblocked = function(event) {
            ret.IDB.close();
            alert("A new version of this page is ready. Please reload!");
          };
          request.onerror = function(event) {
            deferred.reject(new Error("Database error: " + event.target.errorCode));
            if (ret.IDB) {
              ret.IDB.close();
            }
          };
          request.onsuccess = function(event) {
            ret.IDB = ret.IDB || request.result;
            deferred.resolve(ret.IDB);
          };
          request.onupgradeneeded = function(event) {
            ret.IDB = ret.IDB || request.result;
            if (schemaScripts.length > 0) {
              OJ.each(schemaScripts, function(script) {
                script(ret.IDB);
              });
            }
            dbOnUpgrade(ret.IDB);
          };
        }
        return ret.promises.connect;
      };
      disconnect = function() {
        if (ret.promises.connect.isFulfilled()) {
          ret.IDB.close();
        } else {
          if (ret.IDB) {
            ret.promises.connect.done(ret.IDB.close);
          }
        }
      };
      ret.add("connect", connect);
      ret.add("disconnect", disconnect);
      ret.add("getDb", function() {
        return ret.IDB;
      });
      ret.add("schemaScripts", schemaScripts);
      ret.add("tables", OJ.object());
      ret.add("ddl", {
        createTable: function(tableName, tablePkColumnName, autoIncrement) {
          return OJ.fun.shiftRight(OJ.db.table.create, ret, arguments_, this);
        },
        dropTable: function(tableName) {
          return OJ.fun.shiftRight(OJ.db.index.drop, ret, arguments_, this);
        },
        createIndex: function(tableName, columnName, indexName, isUnique) {
          return OJ.fun.shiftRight(OJ.db.index.create, ret, arguments_, this);
        }
      });
      ret.add("insert", function() {
        return OJ.fun.shiftRight(OJ.db.insert, ret, arguments_, this);
      });
      ret.add("update", function() {
        return OJ.fun.shiftRight(OJ.db.update, ret, arguments_, this);
      });
      select = OJ.object();
      ret.add("select", select);
      select.add("all", function() {
        return OJ.fun.shiftRight(OJ.db.select.all, ret, arguments_, this);
      });
      select.add("from", function() {
        return OJ.fun.shiftRight(OJ.db.select.from, ret, arguments_, this);
      });
      ret.connect(name, version);
      return ret;
    };
    OJ.db.register("dbManager", dbManager);
  })();

}).call(this);

//# sourceMappingURL=db.map
