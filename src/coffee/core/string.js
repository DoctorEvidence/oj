// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    OJ.register("delimitedString", function(string, opts) {
      var defaults, retObj;
      defaults = {
        newLineToDelimiter: true,
        spaceToDelimiter: true,
        removeDuplicates: true,
        delimiter: ",",
        initString: OJ.to.string(string)
      };
      retObj = {
        array: [],
        delimited: function() {
          return retObj.array.join(defaults.delimiter);
        },
        string: function(delimiter) {
          var ret;
          if (delimiter == null) {
            delimiter = defaults.delimiter;
          }
          ret = '';
          OJ.each(retObj.array, function(val) {
            if (ret.length > 0) {
              ret += delimiter;
            }
            ret += val;
          });
          return ret;
        },
        toString: function() {
          return retObj.string();
        },
        add: function(str) {
          retObj.array.push(defaults.parse(str));
          defaults.deleteDuplicates();
          return retObj;
        },
        remove: function(str) {
          var remove;
          remove = function(array) {
            return array.filter(function(item) {
              if (item !== str) {
                return true;
              }
            });
          };
          retObj.array = remove(retObj.array);
          return retObj;
        },
        count: function() {
          return retObj.array.length;
        },
        contains: function(str, caseSensitive) {
          var isCaseSensitive, match;
          isCaseSensitive = OJ.to.bool(caseSensitive);
          str = OJ.to.string(str).trim();
          if (false === isCaseSensitive) {
            str = str.toLowerCase();
          }
          match = retObj.array.filter(function(matStr) {
            return (isCaseSensitive && OJ.to.string(matStr).trim() === str) || OJ.to.string(matStr).trim().toLowerCase() === str;
          });
          return match.length > 0;
        },
        each: function(callBack) {
          return retObj.array.forEach(callBack);
        }
      };
      defaults.parse = function(str) {
        var ret;
        ret = OJ.to.string(str);
        if (defaults.newLineToDelimiter) {
          while (ret.indexOf("\n") !== -1) {
            ret = ret.replace(/\n/g, defaults.delimiter);
          }
        }
        if (defaults.spaceToDelimiter) {
          while (ret.indexOf(" ") !== -1) {
            ret = ret.replace(RegExp(" ", "g"), defaults.delimiter);
          }
        }
        while (ret.indexOf(",,") !== -1) {
          ret = ret.replace(/,,/g, defaults.delimiter);
        }
        return ret;
      };
      defaults.deleteDuplicates = function() {
        if (defaults.removeDuplicates) {
          (function() {
            var unique;
            unique = function(array) {
              var seen;
              seen = new Set();
              return array.filter(function(item) {
                if (false === seen.has(item)) {
                  seen.add(item);
                  return true;
                }
              });
            };
            retObj.array = unique(retObj.array);
          })();
        }
      };
      (function(a) {
        var delimitedString;
        if (a.length > 1 && false === OJ.is.plainObject(opts)) {
          OJ.each(a, function(val) {
            if (false === OJ.is.nullOrEmpty(val)) {
              retObj.array.push(val);
            }
          });
        } else if (string && string.length > 0) {
          OJ.extend(defaults, opts);
          delimitedString = defaults.parse(string);
          defaults.initString = delimitedString;
          retObj.array = delimitedString.split(defaults.delimiter);
        }
        defaults.deleteDuplicates();
      })(arguments);
      return retObj;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=string.js.map