// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {

    /*
    Take an array of string values and a number of partitions to create.
    Uses the first letter of each string value in the array to convert to unique code character (lower case)
    Builds a int range based on unique code chars.
     */
    var rangeToSubRanges, stringRangeToSubRanges;
    stringRangeToSubRanges = function(n, range) {
      var charRange, i, nuRange, subRange, _results;
      if (n == null) {
        n = 6;
      }
      if (range == null) {
        range = [];
      }
      charRange = [];
      OJ.each(range, function(val) {
        var char;
        char = val.trim()[0].toLowerCase();
        if (false === _.contains(charRange, char)) {
          return charRange.push(char.charCodeAt());
        }
      });
      nuRange = rangeToSubRanges(n, charRange);
      i = 0;
      _results = [];
      while (i < n) {
        i += 1;
        subRange = nuRange[i];
        _results.push(subRange.map(function(val) {
          return String.fromCharCode(val);
        }));
      }
      return _results;
    };

    /*
    Take an array of int values and a number of partitions to create.
    Divides the original array into the specified number of sub arrays.
    Overflow is passed to the final partition.
     */
    rangeToSubRanges = function(n, range) {
      var chunkVal, distance, i, jump, rangeHigh, rangeLow, subRangeSize, subRanges;
      if (n == null) {
        n = 6;
      }
      if (range == null) {
        range = [];
      }
      rangeLow = _.min(range);
      rangeHigh = _.max(range);
      distance = rangeHigh - rangeLow;
      subRangeSize = distance / n;
      subRanges = {};
      chunkVal = rangeLow;
      i = 0;
      while (i < n) {
        i += 1;
        if (i < 6) {
          jump = Math.round(subRangeSize);
        } else {
          jump = Math.floor(subRangeSize);
          if (chunkVal + jump < rangeHigh) {
            jump += rangeHigh - chunkVal - jump + 1;
          }
        }
        subRanges[i] = _.range(chunkVal, chunkVal + jump);
        chunkVal += jump;
      }
      return subRanges;
    };
    OJ.register('stringRangeToSubRanges', stringRangeToSubRanges);
    OJ.register('rangeToSubRanges', rangeToSubRanges);
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=ranges.js.map