// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var ajax, config;
    config = {};
    config.onSuccess = function(opts, data, url) {
      var response;
      response = {};
      OJ.extend(response, data, true);
    };
    config.onError = function(xmlHttpRequest, textStatus, param1, opts) {
      if (opts == null) {
        opts = OJ.object();
      }
      if (textStatus !== 'abort') {
        OJ.console.table({
          Webservice: opts.url,
          data: opts.data,
          Failed: textStatus,
          state: xmlHttpRequest.state(),
          status: xmlHttpRequest.status,
          statusText: xmlHttpRequest.statusText,
          readyState: xmlHttpRequest.readyState,
          responseText: xmlHttpRequest.responseText
        });
        opts.error(textStatus);
      }
    };
    config.execRequest = function(verb, opts) {
      var defaults, getPromiseFromAjax, promise;
      if (verb == null) {
        verb = 'GET';
      }
      if (opts == null) {
        opts = OJ.object();
      }
      defaults = {
        url: '',
        data: {},
        success: _.noop,
        error: _.noop,
        complete: _.noop,
        overrideError: false,
        watchGlobal: true,
        useCache: false
      };
      OJ.extend(defaults, opts);
      defaults.startTime = new Date();
      if (false === OJ.is.nullOrEmpty(defaults.data)) {
        if (verb === 'GET') {
          defaults.data = OJ.params(defaults.data);
        } else {
          defaults.data = OJ.serialize(defaults.data);
        }
      }
      getPromiseFromAjax = function(watchGlobal) {
        var ret;
        ret = $.ajax({
          type: verb,
          url: defaults.url,
          xhrFields: {
            withCredentials: true
          },
          dataType: 'json',
          contentType: 'application/json; charset=utf-8',
          data: defaults.data,
          watchGlobal: false !== watchGlobal
        });
        ret.done(function(data, textStatus, jqXHR) {
          return config.onSuccess(defaults, data, defaults.url);
        });
        ret.fail(function(jqXHR, textStatus, errorText) {
          return config.onError(jqXHR, textStatus, errorText, {
            data: defaults.data,
            watchGlobal: defaults.watchGlobal,
            urlMethod: document.location + '/' + defaults.url
          });
        });
        ret.always(function(xmlHttpRequest, textStatus) {
          return defaults.complete(xmlHttpRequest, textStatus);
        });
        return OJ.async.ajaxPromise(ret);
      };
      promise = void 0;
      if (true === defaults.useCache) {

      } else {
        promise = getPromiseFromAjax(defaults.watchGlobal);
      }
      return promise;
    };
    ajax = {};
    ajax.post = function(opts, type) {
      return config.execRequest('POST', opts);
    };
    ajax.get = function(opts, type) {
      return config.execRequest('GET', opts);
    };
    ajax["delete"] = function(opts, type) {
      return config.execRequest('DELETE', opts);
    };
    ajax.put = function(opts, type) {
      return config.execRequest('PUT', opts);
    };
    OJ.async.register('ajax', ajax);
    return;
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=ajax.map
