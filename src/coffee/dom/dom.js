// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    OJ.register("dom", function(el, parent) {
      var enabled, getData, isControlStillValid, ret, setData, setDataObj;
      if (parent == null) {
        parent = OJ.body;
      }
      'use strict';
      enabled = true;
      ret = OJ.object();
      ret.add('isValid', function() {
        return ret && ret.node instanceof ThinDOM;
      });
      isControlStillValid = function() {
        var valid;
        valid = false === OJ.isNullOrEmpty(ret) && ret.isValid();
        if (false === valid) {
          OJ.error.throwException("ret is null. Event bindings may not have been GCd.");
        }
        return valid;
      };
      ret.add('addClass', function(name) {
        if (isControlStillValid()) {
          ret.$.addClass(name);
        }
        return ret;
      });
      ret.add('bind', function(eventName, event) {
        if (isControlStillValid()) {
          ret.$.bind(eventName, event);
        }
        return ret;
      });
      ret.add('keyboard', function(keys, event) {
        if (isControlStillValid()) {
          Mousetrap.bind(keys, ret[event]);
        }
        return ret;
      });
      getData = function(propName) {
        var data;
        data = null;
        if (isControlStillValid() && propName) {
          if (ret[0] && ret[0].dataset && ret[0].dataset[propName]) {
            data = ret[0].dataset.propName;
          }
        }
        return data;
      };
      setData = function(propName, value) {
        var data;
        data = null;
        if (isControlStillValid() && propName) {
          data = value;
          if (ret[0] && ret[0].dataset) {
            ret[0].dataset[propName] = value;
          }
        }
        return data;
      };
      setDataObj = function(obj) {
        OJ.each(obj, function(val, propName) {
          setData(propName, val);
        });
        return ret;
      };
      ret.add('data', function(prop, val) {
        var data;
        data = "";
        if (isControlStillValid()) {
          if (OJ.isPlainObject(prop)) {
            setDataObj(prop);
          } else {
            switch (arguments_.length) {
              case 1:
                data = getData(prop);
                break;
              case 2:
                setData(prop, val);
                data = ret;
            }
          }
        }
        return data;
      });
      ret.add('disable', function() {
        if (isControlStillValid()) {
          enabled = false;
          ret.attr('disabled', 'disabled');
          ret.addClass('disabled', 'disabled');
        }
        return ret;
      });
      ret.add('empty', function() {
        if (isControlStillValid()) {
          ret.$.empty();
        }
        return ret;
      });
      ret.add('enable', function() {
        if (isControlStillValid()) {
          enabled = true;
          ret.removeAttr('disabled');
          ret.removeClass('disabled');
        }
        return ret;
      });
      ret.add('getId', function() {
        var id;
        if (isControlStillValid()) {
          id = ret[0].id;
        }
        return id;
      });
      ret.add('hide', function() {
        if (isControlStillValid()) {
          ret.css('display', 'none');
        }
        return ret;
      });
      ret.add('length', function() {
        var len;
        len = 0;
        if (isControlStillValid()) {
          len = OJ.number(ret.$.length);
        }
        return len;
      });
      ret.add('parent', parent);
      ret.add('remove', function() {
        if (ret && ret.$) {
          ret.$.remove();
          ret = null;
        }
        return null;
      });
      ret.add('removeClass', function(name) {
        if (isControlStillValid()) {
          ret.$.removeClass(name);
        }
        return ret;
      });
      ret.add('removeProp', function(name) {
        if (isControlStillValid()) {
          ret.$.removeProp(name);
        }
        return ret;
      });
      ret.add('removeAttr', function(name) {
        if (isControlStillValid()) {
          ret.$.removeAttr(name);
        }
        return ret;
      });
      ret.add('required', function(truthy, addLabel) {
        if (isControlStillValid()) {
          switch (OJ.bool(truthy)) {
            case true:
              ret.attr("required", true);
              ret.addClass("required");
              break;
            case false:
              ret.removeProp("required");
              ret.removeClass("required");
          }
        }
        return ret;
      });
      ret.add('root', ret.root);
      ret.add('show', function() {
        if (isControlStillValid()) {
          ret.$.show();
        }
        return ret;
      });
      ret.add('toggle', function() {
        if (isControlStillValid()) {
          ret.$.toggle();
        }
        return ret;
      });
      ret.add('toggleEnable', function() {
        if (isControlStillValid()) {
          if (enabled) {
            ret.disable();
          } else {
            ret.enable();
          }
        }
        return ret;
      });
      ret.add('trigger', function(eventName, eventOpts) {
        if (isControlStillValid()) {
          ret.$.trigger(eventName, eventOpts);
        }
        return ret;
      });
      ret.add('unbind', function(eventName, event) {
        if (isControlStillValid()) {
          ret.$.unbind(eventName, event);
        }
        return ret;
      });
      ret.add('val', function(value) {
        if (isControlStillValid()) {
          if (arguments_.length === 1 && false === OJ.isNullOrUndefined(value)) {
            ret.$.val(value);
            return ret;
          } else {
            return OJ.string(ret.$.val());
          }
        }
      });
      ret.add('valueOf', function() {
        return ret.val();
      });
      ret.add('toString', function() {
        return ret.val();
      });
      return ret;
    });
    OJ.register('isElementInDom', function(elementId) {
      return false === OJ.isNullOrEmpty(OJ.getElement(elementId));
    });
    OJ.register('getElement', function(id) {
      if (typeof document !== 'undefined') {
        return document.getElementById(id);
      } else {
        return void 0;
      }
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=dom.map
