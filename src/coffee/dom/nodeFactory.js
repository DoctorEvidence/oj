// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var addMakeMethod, closed, initBody, makeAdd, makeUniqueId, nestableNodeNames, nodeNames, nonNestableNodes, open;
    closed = 'a abbr acronym address applet article aside audio b bdo big blockquote body button canvas caption center cite code colgroup command datalist dd del details dfn dir div dl dt em embed fieldset figcaption figure font footer form frameset h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins keygen kbd label legend li map mark menu meter nav noframes noscript object ol optgroup option output p pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr tt u ul var video wbr xmp'.split(' ');
    open = 'area base br col command css !DOCTYPE embed hr img input keygen link meta param source track wbr'.split(' ');
    nestableNodeNames = ['div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'fieldset', 'select', 'ol', 'ul', 'table'];
    nonNestableNodes = ['li', 'legend', 'tr', 'td', 'option', 'body', 'head', 'source', 'tbody', 'tfoot', 'thead', 'link', 'script'];

    /*
    Init the body for chaining the first time it's seen
     */
    initBody = _.once(function(body) {
      body.count = 0;
      body.root = null;
      OJ.dom(body, null);
      addMakeMethod(body, 0);
      body.isFullyInit = true;
      return body;
    });

    /*
    Fetch a node from the DOM and return an OJ'fied instance of the element
     */
    OJ.nodes.register('get', function(id, tagName) {
      var el, ret, thinEl;
      if (tagName == null) {
        tagName = 'div';
      }
      ret = null;
      el = document.getElementById(id);
      if (el) {
        thinEl = OJ.restoreElement(tagName, el);
      }
      if (thinEl) {
        ret = OJ.nodes.factory(thinEl, null, 0);
      }
      return ret;
    });
    nodeNames = ['a', 'b', 'br', 'button', 'div', 'em', 'fieldset', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'i', 'img', 'input', 'label', 'legend', 'li', 'nav', 'ol', 'option', 'p', 'select', 'span', 'strong', 'sup', 'svg', 'table', 'tbody', 'td', 'textarea', 'th', 'thead', 'tr', 'ul'];
    makeAdd = function(tagName, el, count) {
      return function(opts) {
        var method, nu;
        method = OJ.nodes[tagName];
        if (method) {
          nu = method(opts, el, true);
        } else {
          method = OJ.components[tagName];
          if (method) {
            nu = method(opts, el, true);
          } else {
            method = OJ.controls[tagName];
            if (method) {
              nu = method(opts, el, true);
            } else {
              method = OJ.inputs[tagName];
              if (method) {
                nu = method(opts, el, true);
              } else {
                nu = OJ.component(tagName, el);
              }
            }
          }
        }
        if (nu) {
          return OJ.nodes.factory(nu, el, count);
        }
      };
    };
    addMakeMethod = function(el, count) {
      var methods;
      methods = OJ.object();
      el.make = function(tagName, opts) {
        var method;
        method = methods[tagName];
        if (!method) {
          method = makeAdd(tagName, el, count);
          methods[tagName] = method;
        }
        return method(opts);
      };
      return el;
    };
    makeUniqueId = function(el, parent, count) {
      var id;
      if (OJ.GENERATE_UNIQUE_IDS) {
        count += 1;
        if (count <= parent.count) {
          count = parent.count + 1;
        }
        parent.count = count;
        if (!ret.getId()) {
          id = parent.getId();
          id += ret.tagName + count;
          ret.attr('id', id);
        }
      }
    };

    /*
    Extends a OJ Control class with all the (permitted) methods on the factory
     */
    OJ.nodes.register('factory', function(el, parent, count) {
      var ret;
      if (parent == null) {
        parent = OJ.body;
      }
      if (count == null) {
        count = parent.count || 0;
      }
      initBody(OJ.body);
      ret = el;
      if (!el.isFullyInit) {
        if (el.tagName !== 'body') {
          ret = OJ.dom(el, parent);
          if (!ret.isInDOM) {
            makeUniquqId(el, parent, count);
            parent.append(ret[0]);
            ret.bindEvents();
            ret.isInDOM = true;
          }
          addMakeMethod(ret, count);
          ret.isFullyInit = true;
        }
      }
      return ret;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=nodeFactory.js.map