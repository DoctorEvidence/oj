// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var controlPostProcessing, extendChain, initBody, isBodyDefined, isChildNodeTypeAllowed, nestableNodeNames, nonNestableNodes;
    nestableNodeNames = ['div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'p', 'fieldset', 'select', 'ol', 'ul', 'table'];
    nonNestableNodes = ['li', 'legend', 'tr', 'td', 'option', 'body', 'head', 'source', 'tbody', 'tfoot', 'thead', 'link', 'script'];
    isChildNodeTypeAllowed = function(parent, tagName) {
      var allowed;
      switch (parent.tagName) {
        case 'a':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        case 'body':
          allowed = _.contains(nestableNodeNames, tagName);
          break;
        case 'div':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        case 'form':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        case 'label':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        case 'legend':
          allowed = false;
          break;
        case 'fieldset':
          allowed = tagName === 'legend' || false === _.contains(nonNestableNodes, tagName);
          break;
        case 'ol':
          allowed = tagName === 'li';
          break;
        case 'ul':
          allowed = tagName === 'li';
          break;
        case 'li':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        case 'table':
          allowed = tagName === 'td' || tagName === 'tr' || tagName === 'tbody';
          break;
        case 'td':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        case 'select':
          allowed = tagName === 'option';
          break;
        case 'option':
          allowed = false;
          break;
        case 'span':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        case 'p':
          allowed = false === _.contains(nonNestableNodes, tagName);
          break;
        default:
          if (parent.tagName.startsWith('x-')) {
            allowed = false === _.contains(nonNestableNodes, tagName);
          } else {
            allowed = false;
          }
      }
      return allowed;
    };
    controlPostProcessing = function(parent, count) {
      if (_.contains(['div', 'span', 'td', 'p', 'body', 'form'], parent.tagName)) {
        OJ.each(OJ.components.members, function(val) {
          return extendChain(val, parent, count);
        });
      }
    };

    /*
    Extend the chain, if permitted
     */
    extendChain = function(tagName, parent, count) {
      if (isChildNodeTypeAllowed(parent, tagName)) {
        return parent.add(tagName, function(opts) {
          var nu;
          if (OJ.nodes[tagName]) {
            nu = OJ.nodes[tagName](opts, parent, true);
          } else {
            nu = OJ.custom(tagName, parent);
          }
          return OJ.nodes.factory(nu, parent, count);
        });
      }
    };

    /*
    Init the body for chaining the first time it's seen
     */
    initBody = _.once(function(body) {
      body.count = 0;
      return OJ.nodes.factory(body, null, 0);
    });
    isBodyDefined = false;
    OJ.nodes.register('factory', function(el, parent, count) {
      var id, ret;
      if (parent == null) {
        parent = OJ.body;
      }
      if (count == null) {
        count = parent.count || 0;
      }
      initBody(OJ.body);
      count += 1;
      if (el.tagName === 'body' && !isBodyDefined) {
        parent = null;
        el.root = null;
        ret = OJ.dom(el, null);
        controlPostProcessing(ret, 0);
        isBodyDefined = true;
      } else {
        parent.count = count;
        ret = OJ.dom(el, parent);
        if (!el.id) {
          id = parent.getId();
          id += ret.tagName + count;
          ret.attr('id', id);
        }
        parent.append(ret[0]);
        controlPostProcessing(ret, count);
      }
      extendChain('a', ret, count);
      extendChain('b', ret, count);
      extendChain('br', ret, count);
      extendChain('button', ret, count);
      extendChain('div', ret, count);
      extendChain('fieldset', ret, count);
      extendChain('form', ret, count);
      extendChain('img', ret, count);
      extendChain('input', ret, count);
      extendChain('label', ret, count);
      extendChain('legend', ret, count);
      extendChain('li', ret, count);
      extendChain('ol', ret, count);
      extendChain('option', ret, count);
      extendChain('p', ret, count);
      extendChain('select', ret, count);
      extendChain('span', ret, count);
      extendChain('svg', ret, count);
      extendChain('table', ret, count);
      extendChain('textarea', ret, count);
      extendChain('ul', ret, count);
      return ret;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=nodeFactory.map
