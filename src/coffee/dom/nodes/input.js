// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  (function(OJ) {
    'use strict';
    var nodeName;
    nodeName = 'input';
    OJ.nodes.register(nodeName, function(options, owner, calledFromFactory) {
      var defaults, newChange, newClick, newFocusout, oldChange, oldClick, oldFocusout, ret, syncValue;
      if (owner == null) {
        owner = OJ.body;
      }
      if (calledFromFactory == null) {
        calledFromFactory = false;
      }
      defaults = {
        props: {
          type: OJ.enums.inputTypes.text,
          placeholder: "",
          value: "",
          size: "",
          maxlength: "",
          autofocus: false,
          autocomplete: "on",
          checked: false
        },
        styles: {},
        events: {
          click: _.noop,
          change: _.noop,
          keyenter: _.noop,
          keyup: _.noop,
          focusout: _.noop
        }
      };
      OJ.extend(defaults, options, true);
      syncValue = function() {
        switch (defaults.props.type) {
          case OJ.enums.inputTypes.checkbox:
            ret.value = ret.$.is(":checked");
            break;
          case OJ.enums.inputTypes.radio:
            ret.value = ret.$.find(":checked").val();
            break;
          default:
            ret.value = ret.val();
        }
        return ret.value;
      };
      oldClick = defaults.events.click;
      newClick = function() {
        var event;
        event = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        syncValue();
        return oldClick.apply(null, event);
      };
      defaults.events.click = newClick;
      oldChange = defaults.events.change;
      newChange = function() {
        var event;
        event = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        syncValue();
        return oldChange.apply(null, event);
      };
      defaults.events.change = newChange;
      oldFocusout = defaults.events.focusout;
      newFocusout = function() {
        var event;
        event = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        syncValue();
        return oldFocusout.apply(null, event);
      };
      defaults.events.focusout = newFocusout;
      ret = OJ.element(nodeName, defaults.props, defaults.styles, defaults.events, defaults.text);
      ret.value = defaults.props.value;
      if (false === calledFromFactory) {
        OJ.nodes.factory(ret, owner);
      }
      return ret;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=input.map
