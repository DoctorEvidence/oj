// Generated by CoffeeScript 1.7.1
(function() {
  var _listenerIIFE;

  (_listenerIIFE = function(OJ) {

    /*
    The private constructor for a Subscribers object.
    @param listenerType {String} The name of the subscriber to create
    @param namespace {String} The NameSpace to which the subscriber belongs
     */
    var Subscribers;
    Subscribers = function(listenerType, namespace) {
      var subscribers, that;
      if (!OJ[namespace]) {
        throw new Error("No subscriber class \"" + namespace + "\" has been defined.");
      }
      if (!OJ[namespace].constants.subscribers) {
        throw new Error("No subscribers have been defined.");
      }
      that = this;
      subscribers = [];

      /*
      For a known subscriber name, apply the appropriate arguments as defined by Ext to a method wrapper to be assigned as the subscriber.
      @param name {OJ.constants.listenerType} Name of the subscriber
      @param method {Function} callback method
       */
      OJ.property(that, "add", (function(name, method) {
        var subscriber;
        if (!OJ[namespace].constants.subscribers.has(name)) {
          throw new Error("SubscriberType type " + name + " is not supported.");
        }
        if (-1 !== subscribers.indexOf(name)) {
          throw new Error(namespace + " already containts a listenere for " + name + ".");
        }
        subscribers.push(name);
        subscriber = OJ[namespace].subscribers[name](method);
        OJ.property(that, name, subscriber);
        return that;
      }), false, false, false);
      return that;
    };
    OJ.instanceOf.register("Subscribers", Subscribers);

    /*
    Create a new subscribers collection. This returns a subscribers object with an add method.
    @param listenerType {String} The name of the subscriber to create
    @param namespace {String} The NameSpace to which the subscriber belongs
     */
    OJ.register("makeSubscribers", function(listenerType, namespace) {
      var ret;
      ret = new Subscribers(listenerType, namespace);
      return ret;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=subscribers.map
