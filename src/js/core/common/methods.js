// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {

    /*
    True if the Object has an Array-like length property
     */
    var contains, deserialize, extend, hasLength, params, serialize;
    OJ.register("hasLength", hasLength = function(obj) {
      'use strict';
      var ret;
      ret = OJ.is.array(obj) || OJ.is.jQuery(obj);
      return ret;
    });
    OJ.register("contains", contains = function(object, index) {
      'use strict';
      var ret;
      ret = false;
      if (false === OJ.is.nullOrUndefined(object)) {
        if (OJ.is.array(object)) {
          ret = object.indexOf(index) !== -1;
        }
        if (false === ret && object.hasOwnProperty(index)) {
          ret = true;
        }
      }
      return ret;
    });

    /*
    Convert an Object to a String to an Object to get a dereferenced copy.
     */
    OJ.register("clone", function(data) {
      'use strict';
      return OJ.deserialize(OJ.serialize(data));
    });

    /*
    Convert an Object to a String
     */
    OJ.register("serialize", serialize = function(data) {
      'use strict';
      var ret;
      ret = "";
      OJ.tryExec(function() {
        ret = JSON.stringify(data);
      });
      return ret;
    });

    /*
    Convert a string into an Object
     */
    OJ.register("deserialize", deserialize = function(data) {
      'use strict';
      var ret;
      ret = {};
      OJ.tryExec(function() {
        ret = OJ["?"].parseJSON(data);
      });
      if (OJ.is.nullOrEmpty(ret)) {
        ret = {};
      }
      return ret;
    });

    /*
    Convert an Object into a serialized parameter string
     */
    OJ.register("params", params = function(data, delimiter) {
      'use strict';
      var ret;
      ret = "";
      delimiter = delimiter || "&";
      if (delimiter === "&") {
        OJ.tryExec(function() {
          ret = OJ["?"].param(data);
        });
      } else {
        OJ.each(data, function(val, key) {
          if (ret.length > 0) {
            ret += delimiter;
          }
          ret += key + "=" + val;
        });
      }
      return OJ.string(ret);
    });

    /*
    Extend the properties of one object with the properties of another. Deep copy to recurse and preserve references.
     */
    OJ.register("extend", extend = function(destObj, srcObj, deepCopy) {
      'use strict';
      var ret;
      ret = destObj || {};
      if (arguments_.length === 3) {
        ret = window.$.extend(OJ.bool(deepCopy), ret, srcObj);
      } else {
        ret = window.$.extend(ret, srcObj);
      }
      return ret;
    });

    /*
    Take an arguments object and convert it into an Array
     */
    OJ.register("getArguments", function(args, sliceAt) {
      'use strict';
      var ret, slice;
      slice = Array.prototype.slice;
      sliceAt = sliceAt || 0;
      ret = slice.call(args, sliceAt);
      return ret;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=methods.map
