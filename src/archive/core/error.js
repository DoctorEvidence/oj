// Generated by CoffeeScript 1.7.1
(function() {
  (function() {
    'use strict';
    OJ.error.register("makeErrorObj", function(errorType, friendlyMsg, esotericMsg) {
      'use strict';
      return {
        type: OJ.string(errorType, OJ.enums.errorType.warning.name),
        message: OJ.string(friendlyMsg),
        detail: OJ.string(esotericMsg)
      };
    });
    OJ.error.register("showError", function(errorJson, friendlyMsg, esotericMsg) {
      'use strict';
      var $errorsdiv, e;
      e = {
        name: "",
        type: "",
        message: friendlyMsg,
        detail: esotericMsg,
        display: true
      };
      if (OJ.isPlainObject(errorJson)) {
        OJ.extend(e, errorJson);
      } else {
        e.type = errorJson;
      }
      $errorsdiv = $("#DialogErrorDiv");
      if ($errorsdiv.length <= 0) {
        $errorsdiv = $("#ErrorDiv");
      }
      if ($errorsdiv.length > 0 && OJ.bool(e.display)) {
        $errorsdiv.OJErrorMessage({
          name: e.name,
          type: e.type,
          message: e.message,
          detail: e.detail
        });
      }
      OJ.debug.error(e.message + "; " + e.detail);
      return true;
    });
    OJ.error.register("errorHandler", function(errorMsg, includeCallStack, includeLocalStorage, doAlert) {
      'use strict';
      if (OJ.hasWebStorage() && includeLocalStorage) {
        OJ.debug.log(window.localStorage);
      }
      if (doAlert) {
        $.OJDialog("ErrorDialog", errorMsg);
      } else {
        OJ.debug.error("Error: " + errorMsg.message + " (Code " + errorMsg.code + ")", includeCallStack);
      }
    });
    OJ.error.register("exception", function(message, name, fileName, lineNumber) {
      var ret;
      ret = {
        message: message,
        name: name,
        fileName: fileName,
        lineNumber: lineNumber
      };
      return ret;
    });
    OJ.error.register("throwException", function(exception, namespace, filename, line) {
      if (typeof exception === typeof "string") {
        exception = OJ.error.exception(exception, namespace, filename, line);
      }
      OJ.debug.error(exception);
      throw exceptionreturn;
    });
    OJ.error.register("catchException", function(exception) {
      var e;
      e = {
        type: "js",
        message: exception.message,
        detail: "JS Error type: " + exception.type + "<br/>\n" + "Stack: " + exception.stack,
        display: OJ.debug.showExceptions() === true
      };
      OJ.error.showError(e);
    });
  })();

}).call(this);

//# sourceMappingURL=error.map
