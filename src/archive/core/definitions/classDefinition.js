// Generated by CoffeeScript 1.7.1
(function() {
  var _classDefinitionIIFE;

  (_classDefinitionIIFE = function(OJ) {

    /*
    Private constructor to create an object suitable for defining a new class
    @param name {String} The name of this class
    @param extend {String} The ExtJS class to extend/copy
    @param requires {Array} [requires] An array of dependencies
    @param alias {Array} [alias] An array of alternate names for this class
    @param id {String} [id] A unique id for this class
    @param store {OJ.store} [store] A data store for this class
    @param plugins {Array} [plugins] An array of plugins to initialize with new instances of this class
    @param constant {String} [constant] A OJ.constants constant to constrain property additions
    @param namespace {String} A OJ namespace to constrain subscribers
    @param onDefine {Function} [onDefine] A method to call when the class definition is defined on the Ext namespace
    @param debug {Boolean} [debug=false] For development debugging purposes. If true, output log content.
     */
    var ClassDefinition;
    ClassDefinition = function(name, extend, requires, alias, id, store, plugins, constant, namespace, onDefine, debug) {
      var classDef, initComponents, subscribers, that;
      that = this;
      classDef = {};

      /*
      Set of properties most Ext classes share
       */
      if (extend) {
        OJ.property(classDef, "extend", extend);
      }
      if (requires) {
        OJ.property(classDef, "requires", requires);
      }
      if (alias) {
        OJ.property(classDef, "alias", alias);
      }
      if (id) {
        OJ.property(classDef, "id", id);
      }
      if (plugins) {
        OJ.property(classDef, "plugins", plugins);
      }
      if (store) {
        OJ.property(classDef, "store", store);
      }

      /*
      initComponents are created when the class is instanced; they are not part of the class definition--except as callbacks
      This is unusual. Most classes do not need this mechanism. See tableGrid for example.
       */
      initComponents = [];
      OJ.property(that, "addInitComponent", (function(method) {
        if (method) {
          initComponents.push(method);
        }
      }), false, false, false);

      /*
      We don't allow subscribers to be defined ad hoc; and if they are defined, they must be defined on the namespace subscriber object
       */
      if (namespace && OJ[namespace]) {
        subscribers = OJ[namespace].subscribers.subscribers();
        OJ.property(that, "subscribers", subscribers);
        OJ.property(that.subscribers, "exception", function() {
          OJ.console.error("An error occurred in " + name + ".", arguments_[0], arguments_[1], arguments_[2], arguments_[3], arguments_[4], arguments_[5]);
        });

        /*
        Interface to Add to the properties that will become part of the Ext class
         */
        if (OJ[namespace].constants.properties) {
          OJ.property(that, "addProp", (function(propName, value) {
            if (!OJ[namespace].constants.properties.has(propName)) {
              throw new Error("Property named \"" + propName + "\" has not be defined on OJ." + namespace + ".constants.properties.");
            }
            OJ.property(classDef, propName, value);
          }), false, false, false);
        }
        OJ.property(that, "props", OJ[namespace].constants.properties);
        OJ.property(that, "subs", OJ[namespace].constants.subscribers);
      }

      /*
      init must be manually called when the class is ready to be constructed (e.g. defined on Ext)
       */
      OJ.property(that, "init", function() {
        var ret;
        OJ.property(classDef, "initComponent", function() {
          var them;
          them = this;
          if (initComponents.length > 0) {
            OJ.each(initComponents, function(func) {
              func(them);
            });
          }
          return them.callParent(arguments_);
        });
        if (subscribers && Object.keys(subscribers).length > 0) {

          /*
          Bit of a hack; but grids are a special case.
           */
          if (namespace === "grids") {
            OJ.property(classDef, "viewConfig", {});
            OJ.property(classDef.viewConfig, "listeners", that.subscribers);
          } else {
            OJ.property(classDef, "listeners", subscribers);
          }
        }
        if (onDefine) {
          onDefine(classDef, that);
        }
        ret = Ext.define(name, classDef);
        return ret;
      });
      return that;
    };
    OJ.instanceOf.register("ClassDefinition", ClassDefinition);

    /*
    Define declares a new class on the ExtJs namespace
    @param def {Object} defintion object with possible properties: def.name def.extend, def.requires, def.alias, def.id, def.store, def.plugins, def.constant, def.onDefine
    @param def.name {String} The name of this class
    @param def.extend {String} The ExtJS class to extend/copy
    @param def.requires {Array} [def.requires] An array of dependencies
    @param def.alias {Array} [def.alias] An array of alternate names for this class
    @param def.id {String} [def.id] A unique id for this class
    @param def.store {OJ.store} [def.store] A data store for this class
    @param def.plugins {Array} [def.plugins] An array of plugins to initialize with new instances of this class
    @param def.constant {String} [def.constant] A OJ.constants constant to constrain property additions
    @param def.namespace [String] A OJ namespace to constrain subscribers
    @param def.onDefine {Function} [def.onDefine] A method to call when the class definition is defined on the Ext namespace
     */
    OJ.register("classDefinition", function(def) {
      var ret;
      if (!def) {
        throw new Error("Cannot create a definition without parameters.");
      }
      if (def.id) {
        def.name = "Ext." + OJ.name + "." + def.id;
        def.alias = ["widget." + def.id];
      }
      if (typeof def.name !== "string") {
        throw new Error("Cannot define a class without a name");
      }
      ret = new ClassDefinition(def.name, def.extend, def.requires, def.alias, def.id, def.store, def.plugins, def.constant, def.namespace, def.onDefine);
      return ret;
    });
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=classDefinition.map
