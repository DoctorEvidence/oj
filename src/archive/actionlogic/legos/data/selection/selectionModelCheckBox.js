// Generated by CoffeeScript 1.7.1

/*
jshint undef: true, unused: true
 */


/*
global OJ:true, window:true, Ext:true, $: true
 */

(function() {
  var _selectionModelClassIIFE;

  (_selectionModelClassIIFE = function(OJ) {

    /*
    Internal class to define a CheckBox Selection Mode. This class cannot be directly instanced.
    @param name {String} A name for the store class
    @param mode {String} [mode=SIMPLE] The selection mode (SIMPLE; SINGLE; MULTI)
    @param onDefine {Function} [onDefine] An optional callback on init
     */
    var CheckBoxSelectionModel;
    CheckBoxSelectionModel = function(name, mode, checkOnly, onDefine) {
      var that;
      if (!OJ.selections.constants.selectionMode.has(mode)) {
        throw new Error("Selection models do not support mode \"" + mode + "\".");
      }
      that = OJ.selections.selectionModel({
        name: name,
        mode: mode,
        onDefine: function(classDef) {
          delete classDef.initComponent;
          OJ.property(classDef, "checkOnly", checkOnly);
          if (onDefine) {
            onDefine(classDef, that);
          }
        }
      });
      return that;
    };
    OJ.instanceOf.register("CheckBoxSelectionModel", CheckBoxSelectionModel);

    /*
    Instance a new Selection Model. Selection Models are the constraints upon which elements from grids can be selected.
    @param selDef {Object} Object describing the model
     */
    OJ.selections.register("selectionModelCheckBox", function(selDef) {
      var ret;
      if (!selDef) {
        throw new Error("Cannot create a selection model without a definition.");
      }
      selDef.mode = selDef.mode || OJ.selections.constants.selectionMode.simple;
      ret = new CheckBoxSelectionModel(selDef.name, selDef.mode, selDef.checkOnly, selDef.onDefine);
      ret.init();
      return ret;
    });
  })((typeof global !== "undefined" && global ? global : (typeof window !== "undefined" ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=selectionModelCheckBox.map
