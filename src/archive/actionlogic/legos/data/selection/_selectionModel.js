// Generated by CoffeeScript 1.7.1
(function() {
  var _selectionModelClassIIFE;

  (_selectionModelClassIIFE = function(OJ) {
    var SelectionModel, selectionMode, selectionModelProperties;
    OJ.makeSubNameSpace("selections");
    selectionMode = OJ.object();
    selectionMode.simple = "SIMPLE";
    selectionMode.single = "SINGLE";
    selectionMode.multi = "MULTI";
    OJ.constant(OJ.selections, "selectionMode", selectionMode);
    selectionModelProperties = OJ.object();
    selectionModelProperties.allowDeselect = "allowDeselect";
    selectionModelProperties.mode = "mode";
    selectionModelProperties.pruneRemoved = "pruneRemoved";
    OJ.constant(OJ.selections, "properties", selectionModelProperties);

    /*
    Internal class to define a Selection Mode. This class cannot be directly instanced.
    @param name {String} A name for the store class
    @param extend {String} [extend=Ext.selection.Model] The Ext extension to use
    @param mode {String} [mode=SIMPLE] The selection mode (SIMPLE; SINGLE; MULTI)
    @param onDefine {Function} [onDefine] An optional callba
     */
    SelectionModel = function(name, extend, mode, onDefine) {
      var that;
      if (!OJ.selections.constants.selectionMode.has(mode)) {
        throw new Error("Grid selection model does not support mode \"" + mode + "\".");
      }
      that = OJ.classDefinition({
        name: name,
        namespace: "selections",
        onDefine: function(classDef) {
          delete classDef.initComponent;
          OJ.property(classDef, "mode", mode);
          if (onDefine) {
            onDefine(classDef);
          }
        }
      });
      return that;
    };
    OJ.instanceOf.register("SelectionModel", SelectionModel);

    /*
    Instance a new Selection Model. Selection Models are the constraints upon which elements from grids can be selected.
    @param selDef {Object} Object describing the model
    @param selDef.name {String} A name for the store class
    @param selDef.extend {String} [extend=Ext.selection.Model] The Ext extension to use
    @param selDef.mode {String} [mode=SIMPLE] The selection mode (SIMPLE; SINGLE; MULTI)
    @param selDef.onDefine {Function} [onDefine] An optional callba
     */
    OJ.selections.register("selectionModel", function(selDef) {
      var ret;
      if (!selDef) {
        throw new Error("Cannot create a selection model without a definition.");
      }
      selDef.mode = selDef.mode || OJ.grids.constants.selectionMode.simple;
      ret = new SelectionModel(selDef.name, selDef.extend, selDef.mode, selDef.onDefine);
      return ret;
    });
  })((typeof global !== "undefined" && global ? global : (typeof window !== "undefined" ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=_selectionModel.map
