// Generated by CoffeeScript 1.7.1
(function() {
  var _gridColumnIIFE;

  (_gridColumnIIFE = function(OJ) {

    /*
    Private renderer column class constructor.
    @param dataIndex {String} Column id
    @param width {Number} [width] Absolute width of the column
    @param flex {Number} [flex] Relative width of the column
    @param onRender {Function} Render method for the column
     */
    var RendererColumn, rendererColumn;
    RendererColumn = function(dataIndex, width, flex, onRender) {
      "use strict";
      var that;
      that = OJ.grids.columns.column({
        xtype: OJ.grids.constants.xtypes.gridcolumn,
        dataIndex: dataIndex
      });
      OJ.property(that, "renderer", onRender);
      if (width && width > 0) {
        OJ.property(that, "width", width);
      } else {
        if (flex && flex > 0) {
          OJ.property(that, "flex", flex);
        }
      }
      return that;
    };
    OJ.instanceOf.register("RendererColumn", RendererColumn);

    /*
    Create a grid column which renders as the result of a callback
    @param colDef {Object} Definition of the renderer column
     */
    OJ.grids.columns.register("rendererColumn", rendererColumn = function(colDef) {
      "use strict";
      var ret;
      if (!colDef || arguments_.length === 0) {
        throw new Error("Cannot create a column without parameters");
      }
      if (!colDef.onRender) {
        throw new Error("Cannot create a render column without a render method.");
      }
      ret = new RendererColumn(colDef.dataIndex, colDef.width, colDef.flex, colDef.onRender);
      return ret;
    });
  })((typeof global !== "undefined" && global ? global : (typeof window !== "undefined" ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=rendererColumn.map
