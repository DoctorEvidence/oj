// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var initFineTuningGrid;
    initFineTuningGrid = function(gridDef) {

      /*
      Instance a collection of fields to describe a row in the SQL output table
       */
      var SqlFineTuningModel, SqlFineTuningStore, actionColumn, grid, moveGridRow, onGetClass, onHandler;
      SqlFineTuningModel = OJ.dataModels.dataModel({
        name: "Ext." + OJ.name + ".SqlFineTuningModel",
        dataTypeCollection: [["id"], ["tableName"], ["tableId"], ["extCmpId"], ["tableAlias"], ["field"], ["output", "boolean"], ["expression"], ["aggregate"], ["alias"], ["sortType"], ["sortOrder"], ["grouping", "boolean"], ["criteria"]]
      });
      OJ.actions.querybuilder.register("SqlFineTuningModel", SqlFineTuningModel);

      /*
      Define the store
       */
      SqlFineTuningStore = OJ.stores.store({
        name: "Ext." + OJ.name + ".SqlFineTuningStore",
        dataModel: OJ.actions.querybuilder.SqlFineTuningModel
      });

      /*
      Put the class into the namespace
       */
      OJ.actions.querybuilder.register("SqlFineTuningStore", SqlFineTuningStore);

      /*
      Define the grid
       */
      grid = OJ.grids.grid({
        name: "Ext." + OJ.name + ".qbFineTuningGrid",
        requires: ["Ext.ux.CheckColumn"],
        id: "qbFineTuningGrid",
        store: "SqlFineTuningStore",
        alias: ["widget.qbFineTuningGrid"],
        plugins: [
          window.Ext.create("Ext.grid.plugin.CellEditing", {
            clicksToEdit: 1
          })
        ],
        columnLines: true
      });

      /*
      Add the subscribers
       */
      grid.subscribers.add(OJ.grids.constants.subscribers.render, function(view) {
        this.dd = {};
        this.dd.dropZone = new Ext.grid.ViewDropZone({
          view: view,
          ddGroup: "SQLTableGridDDGroup",
          handleNodeDrop: function(data, record, position) {}
        });
      }).add(OJ.grids.constants.subscribers.drop, function(node, data, dropRec, dropPosition) {
        OJ.each(data.records, function(rec) {
          OJ.actions.sql.manager.select.fields.addFieldRecord(rec, false);
        });
      });

      /*
      Field Grid specific method
      @param grid {Ext.grid.View} the grid
      @param record {Object} The row in question
      @param index {Number} The position of the row
      @param direction {Number} The direction of movement
       */
      moveGridRow = function(grid, record, index, direction) {
        var store;
        store = grid.getStore();
        if (direction < 0) {
          index--;
          if (index < 0) {
            return;
          }
        } else {
          index++;
          if (index >= grid.getStore().getCount()) {
            return;
          }
        }
        store.suspendAutoSync();
        store.suspendEvents();
        store.remove(record);
        store.insert(index, record);
        store.resumeEvents();
        store.resumeAutoSync();
        store.sync();
      };

      /*
      Define the action column
       */
      actionColumn = OJ.grids.columns.actionColumn(false, "Action", true);
      actionColumn.addItem(OJ.grids.columns.columnItem("img/up_arrow.gif", "Move Column Up", onGetClass = function(index) {
        return index === 0;
      }, onHandler = function(grid, rowIndex, colIndex) {
        var rec;
        rec = grid.getStore().getAt(rowIndex);
        moveGridRow(grid, rec, rowIndex, -1);
      })).addItem(OJ.grids.columns.columnItem("img/down_arrow.gif", "Move Column Down", onGetClass = function(index, store) {
        return (index + 1) === store.getCount();
      }, onHandler = function(grid, rowIndex, colIndex) {
        var rec;
        rec = grid.getStore().getAt(rowIndex);
        moveGridRow(grid, rec, rowIndex, 1);
      })).addItem(OJ.grids.columns.columnItem("img/remove.gif", "Remove Column", null, onHandler = function(grid, rowIndex, colIndex) {
        var bDel, rec, selectionModel, store, tableGrid, tableId;
        rec = grid.getStore().getAt(rowIndex);
        store = void 0;
        tableId = void 0;
        tableGrid = void 0;
        selectionModel = void 0;
        bDel = true;
        tableId = rec.get("extCmpId");
        tableGrid = Ext.getCmp(tableId).down("gridpanel");
        selectionModel = tableGrid.getSelectionModel();
        Ext.Array.each(selectionModel.getSelection(), function(selection) {
          if (rec.get("id") === selection.get("id")) {
            selectionModel.deselect(selection);
            bDel = false;
          }
        });
        if (bDel) {
          store = grid.getStore();
          store.remove(rec);
        }
      }));

      /*
      Define the columns
       */
      grid.columnCollection.add(actionColumn).add(OJ.grids.columns.checkColumn(false, "Output", true)).add(OJ.grids.columns.gridColumn(false, "Expression", true, 0.225, "textfield")).add(OJ.grids.columns.gridColumn(false, "Aggregate", true, null, "textfield")).add(OJ.grids.columns.gridColumn(false, "Alias", true, null, "textfield")).add(OJ.grids.columns.gridColumn(false, "Sort Type", true)).add(OJ.grids.columns.gridColumn(false, "Sort Order", true)).add(OJ.grids.columns.checkColumn(false, "Grouping", true)).add(OJ.grids.columns.gridColumn(false, "Criteria", true, null, "textfield"));

      /*
      Create the grid
       */
      grid.init();
      return {
        xtype: "qbFineTuningGrid",
        border: false,
        region: "south",
        height: 120,
        split: true
      };
    };
    OJ.actions.querybuilder.register("qbFineTuningGrid", initFineTuningGrid);
  })((typeof global !== "undefined" && global ? global : (typeof window !== "undefined" ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=qbFineTuningGrid.map
