// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var closeSQLTable, connection, getLeftRightCoordinates, getOffset, initSQLTable, moveWindow, onInit, regStartDrag, sheet, showSQLTableCM, showTableAliasEditForm;
    getOffset = function(thisView, constrain) {
      var s, xy;
      xy = thisView.dd.getXY(constrain);
      s = thisView.dd.startXY;
      return [xy[0] - s[0], xy[1] - s[1]];
    };
    closeSQLTable = function(thisView) {
      var _doMoveWindow, _doRegStartDrag;
      OJ.actions.sql.manager.select.fields.removeFieldsByTableId(thisView.tableId);
      OJ.actions.sql.manager.select.tables.removeTableById(thisView.tableId);
      thisView.getHeader().el.un("mousedown", (_doRegStartDrag = function() {
        regStartDrag(thisView);
      }), thisView);
      Ext.EventManager.un(document, "mousemove", (_doMoveWindow = function() {
        moveWindow(thisView);
      }), thisView);
      Ext.getCmp("qbTablePanel").down("draw").surface.remove(thisView.shadowSprite, false);
      OJ.actions.sql.manager.connections = Ext.Array.filter(OJ.actions.sql.manager.connections, function(connection) {
        var bRemove, j, l;
        bRemove = true;
        j = 0;
        l = this.connectionUUIDs.length;
        while (j < l) {
          if (connection.uuid === this.connectionUUIDs[j]) {
            connection.line.remove();
            connection.bgLine.remove();
            connection.miniLine1.remove();
            connection.miniLine2.remove();
            bRemove = false;
          }
          j++;
        }
        return bRemove;
      }, thisView);
    };
    initSQLTable = function(thisView) {
      var childSize, qbTablePanel, sprite, xyChildPos, xyParentPos, _doMoveWindow, _doRegStartDrag, _doShowSqlTable, _doShowTableAliasEdit;
      qbTablePanel = void 0;
      xyParentPos = void 0;
      xyChildPos = void 0;
      childSize = void 0;
      sprite = void 0;
      qbTablePanel = Ext.getCmp("qbTablePanel");
      xyParentPos = qbTablePanel.el.getXY();
      xyChildPos = thisView.el.getXY();
      childSize = thisView.el.getSize();
      sprite = new OJ.actions.querybuilder.SqlTableJoinSprite({
        type: "rect",
        stroke: "#fff",
        height: childSize.height - 4,
        width: childSize.width - 4,
        x: xyChildPos[0] - xyParentPos[0] + 2,
        y: xyChildPos[1] - xyParentPos[1] + 2,
        scrollTop: 0
      });
      thisView.shadowSprite = qbTablePanel.down("draw").surface.add(sprite).show(true);
      thisView.resizer.on("resize", (function(resizer, width, height, event) {
        var i, thisViewEl;
        thisViewEl = this;
        thisViewEl.shadowSprite.setAttributes({
          width: width - 6,
          height: height - 6
        }, true);
        i = OJ.actions.sql.manager.connections.length;
        while (i--) {
          connection(thisViewEl, OJ.actions.sql.manager.connections[i]);
        }
      }), thisView);
      thisView.getHeader().el.on("mousedown", (_doRegStartDrag = function() {
        regStartDrag(thisView);
      }), thisView);
      thisView.getHeader().el.on("contextmenu", (_doShowSqlTable = function() {
        showSQLTableCM(thisView);
      }), thisView);
      thisView.getHeader().el.on("dblclick", (_doShowTableAliasEdit = function() {
        showTableAliasEditForm(thisView);
      }), thisView);
      thisView.getHeader().origValue = "";
      Ext.EventManager.on(document, "mousemove", (_doMoveWindow = function() {
        moveWindow(thisView);
      }), thisView);
      Ext.EventManager.on(document, "mouseup", (function() {
        thisView.bMouseDown = false;
      }), thisView);
    };
    showSQLTableCM = function(thisView, event, el) {
      var cm;
      cm = void 0;
      event.stopEvent();
      cm = Ext.create("Ext.menu.Menu", {
        items: [
          {
            text: "Add/Edit Alias",
            icon: "resources/images/document_edit16x16.gif",
            handler: Ext.Function.bind(function() {
              showTableAliasEditForm(this);
            }, this)
          }, {
            text: "Remove Table",
            icon: "resources/images/delete.gif",
            handler: Ext.Function.bind(function() {
              this.close();
            }, this)
          }, {
            text: "Close Menu",
            icon: "resources/images/cross.gif",
            handler: Ext.emptyFn
          }
        ]
      });
      cm.showAt(event.getXY());
    };
    showTableAliasEditForm = function(thisView, event, el) {
      var header, table, title, titleId;
      table = void 0;
      header = void 0;
      title = void 0;
      titleId = void 0;
      table = OJ.actions.sql.manager.select.tables.getTableById(thisView.tableId);
      header = thisView.getHeader();
      titleId = "#" + header.getId() + "_hd";
      title = thisView.down(titleId);
      header.remove(title);
      header.insert(0, [
        {
          xtype: "textfield",
          flex: 0.95,
          parentCmp: header,
          parentTableModel: table,
          initComponent: function() {
            this.setValue(table.get("tableAlias"));
            this.on("render", (function(field, event) {
              field.focus(true, 200);
            }), this);
            this.on("specialkey", (function(field, event) {
              if (event.getKey() === event.ENTER) {
                if (field.getValue() !== this.parentCmp.origValue) {
                  this.parentTableModel.set("tableAlias", field.getValue());
                  this.parentCmp.origValue = field.getValue();
                }
                this.removeTextField();
                this.addTitle();
              }
            }), this);
            this.on("blur", (function(field, event) {
              if (field.getValue() !== this.parentCmp.origValue) {
                this.parentTableModel.set("tableAlias", field.getValue());
                this.parentCmp.origValue = field.getValue();
              }
              this.removeTextField();
              this.addTitle();
            }), this);
            this.callParent(arguments_);
          },
          removeTextField: function() {
            var next;
            next = void 0;
            next = this.next();
            this.parentCmp.remove(next);
            this.parentCmp.remove(this);
          },
          addTitle: function() {
            var titleText;
            titleText = void 0;
            if (this.parentTableModel.get("tableAlias") !== "") {
              titleText = this.parentTableModel.get("tableAlias") + " ( " + this.parentTableModel.get("tableName") + " )";
            } else {
              titleText = this.parentTableModel.get("tableName");
            }
            this.parentCmp.insert(0, {
              xtype: "component",
              ariaRole: "heading",
              focusable: false,
              noWrap: true,
              flex: 1,
              id: this.parentCmp.id + "_hd",
              style: "text-align:" + this.parentCmp.titleAlign,
              cls: this.parentCmp.baseCls + "-text-container",
              renderTpl: this.parentCmp.getTpl("headingTpl"),
              renderData: {
                title: titleText,
                cls: this.parentCmp.baseCls,
                ui: this.parentCmp.ui
              },
              childEls: ["textEl"]
            });
          }
        }, {
          xtype: "component",
          flex: 0.05
        }
      ]);
    };
    regStartDrag = function(thisView) {
      thisView.bMouseDown = true;
      thisView.shadowSprite.startDrag(thisView.getId());
    };
    moveWindow = function(thisView, event, domEl, opt) {
      var i, relPosMovement;
      relPosMovement = void 0;
      if (thisView.bMouseDown) {
        relPosMovement = getOffset(thisView, "point");
        thisView.shadowSprite.onDrag(relPosMovement);
        if (thisView.shadowSprite.bConnections) {
          i = OJ.actions.sql.manager.connections.length;
          while (i--) {
            connection(thisView, OJ.actions.sql.manager.connections[i]);
          }
        }
      }
    };
    getLeftRightCoordinates = function(thisView, obj1, obj2, aBBPos) {
      var LeftRightCoordinates, bb1, bb2, columHeight, dis, dx, dy, headerHeight, i, j, leftBoxConnectionPoint, p, rightBoxConnectionPoint;
      bb1 = void 0;
      bb2 = void 0;
      p = [];
      dx = void 0;
      leftBoxConnectionPoint = void 0;
      rightBoxConnectionPoint = void 0;
      dis = void 0;
      columHeight = 21;
      headerHeight = 46;
      LeftRightCoordinates = {};
      bb1 = obj1.getBBox();
      bb1.pY = bb1.y + headerHeight + ((aBBPos[0] - 1) * columHeight) + (columHeight / 2) - obj1.scrollTop;
      bb2 = obj2.getBBox();
      bb2.pY = bb2.y + headerHeight + ((aBBPos[1] - 1) * columHeight) + (columHeight / 2) - obj2.scrollTop;
      if (bb1.pY > (bb1.y + 4) && bb1.pY < (bb1.y + bb1.height - 4)) {
        p.push({
          x: bb1.x - 1,
          y: bb1.pY
        });
        p.push({
          x: bb1.x + bb1.width + 1,
          y: bb1.pY
        });
      } else {
        if (bb1.pY < (bb1.y + 4)) {
          p.push({
            x: bb1.x - 1,
            y: bb1.y + 4
          });
          p.push({
            x: bb1.x + bb1.width + 1,
            y: bb1.y + 4
          });
        } else {
          p.push({
            x: bb1.x - 1,
            y: bb1.y + bb1.height - 4
          });
          p.push({
            x: bb1.x + bb1.width + 1,
            y: bb1.y + bb1.height - 4
          });
        }
      }
      if (bb2.pY > (bb2.y + 4) && bb2.pY < (bb2.y + bb2.height - 4)) {
        p.push({
          x: bb2.x - 1,
          y: bb2.pY
        });
        p.push({
          x: bb2.x + bb2.width + 1,
          y: bb2.pY
        });
      } else {
        if (bb2.pY < (bb2.y + 4)) {
          p.push({
            x: bb2.x - 1,
            y: bb2.y + 4
          });
          p.push({
            x: bb2.x + bb2.width + 1,
            y: bb2.y + 4
          });
        } else {
          p.push({
            x: bb2.x - 1,
            y: bb2.y + bb2.height - 4
          });
          p.push({
            x: bb2.x + bb2.width + 1,
            y: bb2.y + bb2.height - 4
          });
        }
      }
      i = 0;
      while (i < 2) {
        j = 2;
        while (j < 4) {
          dx = Math.abs(p[i].x - p[j].x);
          dy = Math.abs(p[i].y - p[j].y);
          if (((i === 0 && j === 3) && dx < Math.abs(p[1].x - p[2].x)) || ((i === 1 && j === 2) && dx < Math.abs(p[0].x - p[3].x))) {
            leftBoxConnectionPoint = p[i];
            rightBoxConnectionPoint = p[j];
          }
          j++;
        }
        i++;
      }
      return {
        leftBoxConnectionPoint: leftBoxConnectionPoint,
        rightBoxConnectionPoint: rightBoxConnectionPoint
      };
    };
    connection = function(thisView, obj1, obj2, line, aBBPos) {
      var LeftRightCoordinates, color, line1, line2, miniLine1, miniLine2, path, ret, surface;
      LeftRightCoordinates = void 0;
      line1 = void 0;
      line2 = void 0;
      miniLine1 = void 0;
      miniLine2 = void 0;
      path = void 0;
      surface = void 0;
      color = (typeof line === "string" ? line : "#000");
      ret = OJ.object();
      if (obj1.line && obj1.from && obj1.to && obj1.aBBPos) {
        line = obj1;
        obj1 = line.from;
        obj2 = line.to;
        aBBPos = line.aBBPos;
      }
      surface = obj1.surface;
      LeftRightCoordinates = getLeftRightCoordinates(this, obj1, obj2, aBBPos);
      if (LeftRightCoordinates.leftBoxConnectionPoint.x - LeftRightCoordinates.rightBoxConnectionPoint.x < 0) {
        line1 = 12;
        line2 = 12;
      } else {
        line1 = -12;
        line2 = -12;
      }
      path = ["M", LeftRightCoordinates.leftBoxConnectionPoint.x, LeftRightCoordinates.leftBoxConnectionPoint.y, "H", LeftRightCoordinates.leftBoxConnectionPoint.x + line1, "L", LeftRightCoordinates.rightBoxConnectionPoint.x - line2, LeftRightCoordinates.rightBoxConnectionPoint.y, "H", LeftRightCoordinates.rightBoxConnectionPoint.x].join(",");
      miniLine1 = ["M", LeftRightCoordinates.leftBoxConnectionPoint.x, LeftRightCoordinates.leftBoxConnectionPoint.y, "H", LeftRightCoordinates.leftBoxConnectionPoint.x + line1].join(",");
      miniLine2 = ["M", LeftRightCoordinates.rightBoxConnectionPoint.x - line2, LeftRightCoordinates.rightBoxConnectionPoint.y, "H", LeftRightCoordinates.rightBoxConnectionPoint.x].join(",");
      if (line && line.line) {
        line.bgLine && line.bgLine.setAttributes({
          path: path
        }, true);
        line.line.setAttributes({
          path: path
        }, true);
        line.miniLine1.setAttributes({
          path: miniLine1
        }, true);
        line.miniLine2.setAttributes({
          path: miniLine2
        }, true);
      } else {
        return {
          line: Ext.create("Ext.draw.Sprite", {
            type: "path",
            path: path,
            stroke: color,
            fill: "none",
            "stroke-width": 1,
            surface: surface
          }).show(true),
          miniLine1: Ext.create("Ext.draw.Sprite", {
            type: "path",
            path: miniLine1,
            stroke: color,
            fill: "none",
            "stroke-width": 2,
            surface: surface
          }).show(true),
          miniLine2: Ext.create("Ext.draw.Sprite", {
            type: "path",
            path: miniLine2,
            stroke: color,
            fill: "none",
            "stroke-width": 2,
            surface: surface
          }).show(true),
          bgLine: Ext.create("Ext.draw.Sprite", {
            type: "path",
            path: path,
            opacity: 0,
            stroke: "#fff",
            fill: "none",
            "stroke-width": 10,
            surface: surface
          }).show(true),
          from: obj1,
          to: obj2,
          aBBPos: aBBPos,
          uuid: OJ.createUUID()
        };
      }
      return ret;
    };
    onInit = function(that) {
      var store, tableModel;
      store = void 0;
      tableModel = void 0;
      that.connectionUUIDs = [];
      that.bMouseDown = false;
      that.tableId = OJ.createUUID();
      store = Ext.create("Ext.data.Store", {
        autoLoad: true,
        fields: [
          {
            name: "id",
            type: "string"
          }, {
            name: "tableName",
            type: "string"
          }, {
            name: "tableId",
            type: "string",
            defaultValue: that.tableId
          }, {
            name: "field",
            type: "string"
          }, {
            name: "extCmpId",
            type: "string",
            defaultValue: that.id
          }, {
            name: "type",
            type: "string"
          }, {
            name: "null",
            type: "string"
          }, {
            name: "key",
            type: "string"
          }, {
            name: "default",
            type: "string"
          }, {
            name: "extra",
            type: "string"
          }
        ],
        proxy: {
          type: "memory",
          reader: {
            type: "json",
            root: "items"
          }
        },
        data: {
          items: [
            {
              field: "*",
              extra: "",
              id: "D04A39CB-AF22-A5F3-0246BA11FD51BCD8",
              key: "",
              tableName: "library",
              "null": "",
              "default": "",
              type: ""
            }, {
              field: that.title + "id",
              extra: "auto_increment",
              id: OJ.createUUID(),
              key: "PRI",
              tableName: that.title,
              "null": false,
              "default": "",
              type: "int(11)"
            }, {
              field: Faker.Company.catchPhrase().replace(" ", "_").replace("-", "_"),
              extra: "",
              id: OJ.createUUID(),
              key: "",
              tableName: that.title,
              "null": true,
              "default": "",
              type: "datetime"
            }, {
              field: Faker.Lorem.words()[0],
              extra: "",
              id: OJ.createUUID(),
              key: "MUL",
              tableName: that.title,
              "null": true,
              "default": "",
              type: "varchar(255)"
            }
          ]
        }
      });
      tableModel = new OJ.actions.querybuilder.SqlTableNameModel({
        id: that.tableId,
        tableName: that.title,
        tableAlias: ""
      });
      OJ.actions.sql.manager.select.tables.addTable(tableModel);
      that.items = [
        {
          xtype: "qbTableGrid",
          store: store
        }
      ];
    };
    sheet = OJ.sheets.sheet({
      name: "Ext." + OJ.name + ".qbSqlWindowTable",
      alias: ["widget.qbSqlWindowTable"],
      onInit: onInit
    });
    sheet.addProp("minWidth", 120);
    sheet.addProp("height", 180);
    sheet.addProp("width", 140);
    sheet.addProp("closable", true);
    sheet.addProp("connection", connection);
    sheet.addProp("shadowSprite", {});
    sheet.addProp("layout", {
      type: "fit"
    });
    sheet.subscribers.add(OJ.sheets.constants.subscribers.show, function(thisView, eOpts) {
      initSQLTable(thisView);
    });
    sheet.subscribers.add(OJ.sheets.constants.subscribers.beforeshow, function(thisView, eOpts) {
      var aWin, i, l, offeset, prev;
      aWin = void 0;
      prev = void 0;
      offeset = 20;
      aWin = Ext.ComponentQuery.query("qbSqlWindowTable");
      if (aWin.length === 1) {
        thisView.x = offeset;
        thisView.y = offeset;
      } else {
        i = 0;
        l = aWin.length;
        while (i < l) {
          if (aWin[i] === thisView) {
            if (prev) {
              thisView.x = prev.x + offeset;
              thisView.y = prev.y + offeset;
            }
          }
          if (aWin[i].isVisible()) {
            prev = aWin[i];
          }
          i++;
        }
      }
      thisView.setPosition(thisView.x, thisView.y);
    });
    sheet.subscribers.add(OJ.sheets.constants.subscribers.beforeclose, function(thisView, eOpts) {
      closeSQLTable(thisView);
    });
    sheet.init();
  })((typeof global !== "undefined" && global ? global : (typeof window !== "undefined" ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=qbSqlWindowTable.map
