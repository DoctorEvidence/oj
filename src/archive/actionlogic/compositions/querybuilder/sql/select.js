// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ) {
    var arrayRemove, changeLeftRightOnJoin, select, sortTablesByJoins, sqlToString, updateSQLOutput;
    sortTablesByJoins = function(ret, tables, oUsedTables) {
      var aCondition, aJoin, aJoins, aTables, i, j, joinTable, l, len, oTemp;
      aTables = [];
      oTemp = void 0;
      aJoins = [];
      oUsedTables = oUsedTables || {};
      i = 0;
      aCondition = [];
      aJoin = void 0;
      l = tables.length;
      while (i < l) {
        if (!oUsedTables.hasOwnProperty(tables[i].get("id"))) {
          aTables.push(tables[i]);
          oUsedTables[tables[i].get("id")] = true;
          aJoin = ret.joins.getJoinsByTableId(tables[i].get("id"));
          j = 0;
          joinTable = void 0;
          len = aJoin.length;
          while (j < len) {
            if (!oUsedTables.hasOwnProperty(aJoin[j].get("id"))) {
              oUsedTables[aJoin[j].get("id")] = true;
              if (tables[i].get("id") !== aJoin[j].get("leftTableId")) {
                joinTable = ret.tables.getTableById(aJoin[j].get("leftTableId"));
                ret.changeLeftRightOnJoin(aJoin[j]);
              } else {
                joinTable = ret.tables.getTableById(aJoin[j].get("rightTableId"));
              }
              oTemp = ret.sortTablesByJoins([joinTable], oUsedTables);
              oUsedTables = oTemp.oUsedTables;
              aTables = aTables.concat(oTemp.aTables);
            }
            j++;
          }
        }
        i++;
      }
      return {
        aTables: aTables,
        oUsedTables: oUsedTables
      };
    };
    changeLeftRightOnJoin = function(ret, join) {
      var joinCondition, leftTable, leftTableField, rightTable, rightTableField;
      leftTable = void 0;
      leftTableField = void 0;
      rightTable = void 0;
      rightTableField = void 0;
      joinCondition = "";
      leftTable = ret.tables.getTableById(join.get("rightTableId"));
      leftTableField = join.get("rightTableField");
      rightTable = ret.tables.getTableById(join.get("leftTableId"));
      rightTableField = join.get("leftTableField");
      if (leftTable.get("tableAlias") !== "") {
        joinCondition = joinCondition + leftTable.get("tableAlias") + "." + join.get("rightTableField") + "=";
      } else {
        joinCondition = joinCondition + leftTable.get("tableName") + "." + join.get("rightTableField") + "=";
      }
      if (rightTable.get("tableAlias") !== "") {
        joinCondition = joinCondition + rightTable.get("tableAlias") + "." + join.get("leftTableField");
      } else {
        joinCondition = joinCondition + rightTable.get("tableName") + "." + join.get("leftTableField");
      }
      join.beginEdit();
      join.set("leftTableId", leftTable.get("id"));
      join.set("leftTableField", leftTableField);
      join.set("rightTableId", rightTable.get("id"));
      join.set("rightTableField", rightTableField);
      join.set("joinCondition", joinCondition);
      join.commit(true);
      join.endEdit();
    };
    arrayRemove = function(array, filterProperty, filterValue) {
      var aReturn;
      aReturn = void 0;
      aReturn = Ext.Array.filter(array, function(item) {
        var bRemove;
        bRemove = true;
        if (item[filterProperty] === filterValue) {
          bRemove = false;
        }
        return bRemove;
      });
      return aReturn;
    };
    updateSQLOutput = function(ret) {
      var sqlHTML, sqlOutput, sqlQutputPanel;
      sqlOutput = void 0;
      sqlHTML = void 0;
      sqlQutputPanel = void 0;
      sqlOutput = ret.sqlToString();
      sqlHTML = "<pre class=\"brush: sql\">" + sqlOutput + "</pre>";
      sqlQutputPanel = Ext.getCmp("qbOutputPanel");
      sqlQutputPanel.update(sqlHTML);
    };
    sqlToString = function(ret) {
      var aCriteriaFields, aFromSQL, aGroupFields, aJoin, aJoins, aOrderFields, aOutputFields, aTables, bFirst, criteriaSQL, fieldSeperator, fromSQL, groupBySQL, h, iGroup, iOrder, iOut, iWhere, j, joinCondition, joinSQL, joinType, k, l, leftTable, len, ln, oJoinTables, orderBySQL, rightTable, selectFieldsSQL, sqlOutput;
      sqlOutput = "SELECT ";
      aJoins = [];
      aOutputFields = [];
      oJoinTables = {};
      aTables = [];
      aCriteriaFields = [];
      aGroupFields = [];
      aOrderFields = [];
      selectFieldsSQL = "";
      fromSQL = "";
      aFromSQL = [];
      criteriaSQL = "";
      orderBySQL = "";
      groupBySQL = "";
      fieldSeperator = ", ";
      joinSQL = "";
      bFirst = true;
      ret.fields.each(function(field) {
        if (field.get("output")) {
          aOutputFields.push(field);
        }
        if (field.get("criteria") !== "") {
          aCriteriaFields.push(field);
        }
        if (field.get("grouping")) {
          aGroupFields.push(field);
        }
        if (field.get("sortType") !== "") {
          aOrderFields.push(field);
        }
      });
      ret.tables.each(function(table) {
        aTables.push(table);
      });
      aTables = ret.sortTablesByJoins(aTables).aTables;
      ret.joins.each(function(join) {
        aJoins.push(join);
      });
      k = 0;
      aJoin = [];
      oJoinTables = {};
      joinCondition = "";
      joinType = void 0;
      leftTable = void 0;
      rightTable = void 0;
      l = aTables.length;
      while (k < l) {
        if (k === aTables.length - 1) {
          fieldSeperator = "";
        } else {
          fieldSeperator = ", ";
        }
        if (bFirst) {
          oJoinTables[aTables[k].get("id")] = true;
          bFirst = false;
          if ((k + 1) < aTables.length) {
            h = 0;
            len = aJoins.length;
            while (h < len) {
              if (oJoinTables.hasOwnProperty(aJoins[h].get("leftTableId")) && aJoins[h].get("rightTableId") === aTables[k + 1].get("id")) {
                aJoin.push(aJoins[h]);
              }
              if (oJoinTables.hasOwnProperty(aJoins[h].get("rightTableId")) && aJoins[h].get("leftTableId") === aTables[k + 1].get("id")) {
                ret.changeLeftRightOnJoin(aJoins[h]);
                aJoin.push(aJoins[h]);
              }
              h++;
            }
            if (aJoin.length > 0) {
              leftTable = aTables[k];
              rightTable = aTables[k + 1];
              oJoinTables[rightTable.get("id")] = true;
              j = 0;
              fieldSeperator = "";
              ln = aJoin.length;
              while (j < ln) {
                if (j === aJoin.length - 1) {
                  fieldSeperator = "";
                } else {
                  fieldSeperator = "\nAND ";
                }
                joinType = aJoin[j].get("joinType");
                joinCondition = joinCondition + aJoin[j].get("joinCondition") + fieldSeperator;
                j++;
              }
              aJoin = [];
              if (joinSQL !== "") {
                joinSQL = joinSQL + ",\n";
              }
              joinType = joinType || "INNER";
              if (leftTable.get("tableAlias") !== "") {
                joinSQL = joinSQL + leftTable.get("tableName") + " " + leftTable.get("tableAlias") + " " + joinType + " JOIN ";
              } else {
                joinSQL = joinSQL + leftTable.get("tableName") + " " + joinType + " JOIN ";
              }
              if (rightTable.get("tableAlias") !== "") {
                joinSQL = joinSQL + rightTable.get("tableName") + " " + rightTable.get("tableAlias") + " ON " + joinCondition;
              } else {
                joinSQL = joinSQL + rightTable.get("tableName") + " ON " + joinCondition;
              }
              joinCondition = "";
            } else {
              bFirst = true;
              oJoinTables = {};
              if (aTables[k].get("tableAlias") !== "") {
                fromSQL = aTables[k].get("tableName") + " " + aTables[k].get("tableAlias");
              } else {
                fromSQL = aTables[k].get("tableName");
              }
              aFromSQL.push(fromSQL);
            }
          } else {
            if (aTables[k].get("tableAlias") !== "") {
              fromSQL = aTables[k].get("tableName") + " " + aTables[k].get("tableAlias");
            } else {
              fromSQL = aTables[k].get("tableName");
            }
            aFromSQL.push(fromSQL);
          }
        } else {
          bFirst = true;
          if ((k + 1) < aTables.length) {
            h = 0;
            len = aJoins.length;
            while (h < len) {
              if (oJoinTables.hasOwnProperty(aJoins[h].get("leftTableId")) && aJoins[h].get("rightTableId") === aTables[k + 1].get("id")) {
                aJoin.push(aJoins[h]);
              }
              if (oJoinTables.hasOwnProperty(aJoins[h].get("rightTableId")) && aJoins[h].get("leftTableId") === aTables[k + 1].get("id")) {
                ret.changeLeftRightOnJoin(aJoins[h]);
                aJoin.push(aJoins[h]);
              }
              h++;
            }
            if (aJoin.length > 0) {
              rightTable = aTables[k + 1];
              oJoinTables[rightTable.get("id")] = true;
              j = 0;
              fieldSeperator = "";
              ln = aJoin.length;
              while (j < ln) {
                if (j === aJoin.length - 1) {
                  fieldSeperator = "";
                } else {
                  fieldSeperator = "\nAND ";
                }
                joinType = aJoin[j].get("joinType");
                joinCondition = joinCondition + aJoin[j].get("joinCondition") + fieldSeperator;
                j++;
              }
              aJoin = [];
              bFirst = false;
              if (rightTable.get("tableAlias") !== "") {
                joinSQL = joinSQL + "\n" + joinType + " JOIN " + rightTable.get("tableName") + " " + rightTable.get("tableAlias") + " ON " + joinCondition;
              } else {
                joinSQL = joinSQL + "\n" + joinType + " JOIN " + rightTable.get("tableName") + " ON " + joinCondition;
              }
              joinCondition = "";
            } else {
              bFirst = true;
              oJoinTables = {};
            }
          } else {
            oJoinTables = {};
          }
        }
        k++;
      }
      fromSQL = aFromSQL.join(", ");
      if (joinSQL !== "" && fromSQL !== "") {
        joinSQL = joinSQL + ", ";
      }
      fromSQL = "\nFROM " + joinSQL + fromSQL;
      iOut = 0;
      l = aOutputFields.length;
      while (iOut < l) {
        if (iOut === aOutputFields.length - 1) {
          fieldSeperator = "";
        } else {
          fieldSeperator = ", ";
        }
        if (aOutputFields[iOut].get("alias") !== "") {
          selectFieldsSQL = selectFieldsSQL + aOutputFields[iOut].get("expression") + " AS " + aOutputFields[iOut].get("alias") + fieldSeperator;
        } else {
          selectFieldsSQL = selectFieldsSQL + aOutputFields[iOut].get("expression") + fieldSeperator;
        }
        iOut += 1;
      }
      iWhere = 0;
      l = aCriteriaFields.length;
      while (iWhere < l) {
        if (iWhere === 0) {
          criteriaSQL = criteriaSQL + "\nWHERE ";
        } else {
          criteriaSQL = criteriaSQL + "AND ";
        }
        if (iWhere === aCriteriaFields.length - 1) {
          fieldSeperator = "";
        } else {
          fieldSeperator = "\n";
        }
        criteriaSQL = criteriaSQL + aCriteriaFields[iWhere].get("expression") + " " + aCriteriaFields[iWhere].get("criteria") + fieldSeperator;
        iWhere += 1;
      }
      iGroup = 0;
      l = aGroupFields.length;
      while (iGroup < l) {
        if (iGroup === aGroupFields.length - 1) {
          fieldSeperator = "";
        } else {
          fieldSeperator = ", ";
        }
        if (iGroup === 0) {
          groupBySQL = "\nGROUP BY ";
        }
        groupBySQL = groupBySQL + aGroupFields[iGroup].get("expression") + fieldSeperator;
        iGroup += 1;
      }
      iOrder = 0;
      l = aOrderFields.length;
      while (iOrder < l) {
        if (iOrder === aOrderFields.length - 1) {
          fieldSeperator = "";
        } else {
          fieldSeperator = ", ";
        }
        iOrder += 1;
      }
      return sqlOutput + selectFieldsSQL + fromSQL + criteriaSQL + groupBySQL + orderBySQL;
    };
    select = function() {
      var ret;
      ret = OJ.object();
      ret.add("tables", OJ.actions.sql.tables(ret));
      ret.add("fields", OJ.actions.sql.fields(ret));
      ret.add("joins", OJ.actions.sql.joins(ret));
      ret.add("sortTablesByJoins", OJ.fun.curryLeft(sortTablesByJoins, ret));
      ret.add("changeLeftRightOnJoin", OJ.fun.curryLeft(changeLeftRightOnJoin, ret));
      ret.add("arrayRemove", arrayRemove);
      ret.add("updateSQLOutput", OJ.fun.curryLeft(updateSQLOutput, ret));
      ret.add("sqlToString", OJ.fun.curryLeft(sqlToString, ret));
      return ret;
    };
    OJ.actions.sql.register("select", select);
  })((typeof global !== "undefined" && global ? global : (typeof window !== "undefined" ? window : this)).OJ);

}).call(this);

//# sourceMappingURL=select.map
