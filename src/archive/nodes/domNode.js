// Generated by CoffeeScript 1.7.1
(function() {
  (function(OJ, _$) {

    /*
    Create a temporary DOM node
     */
    var getDataProp, isNode, isNodeAlive, setDataProp, setDataProperties;
    OJ.node.register("makeTemp", function(id, el, _$el) {
      'use strict';
      return new OJ.metadata.Node(id, el, _$el);
    });

    /*
    Cast a DOM node into a namespace Node
     */
    OJ.node.register("make", function(id, el, _$el) {
      'use strict';
      var node;
      node = new OJ.metadata.Node(id, el, _$el);
      return OJ.node.extendNode(node);
    });

    /*
    Extend a Node with helper methods and properties
     */
    OJ.node.register("extendNode", function(NsNode) {
      'use strict';
      var NsInternal, addChild, addClass, append, attr, bind, children, clickOnEnter, css, data, disable, el, empty, enable, filter, find, first, hide, makeChild, parent, prop, remove, removeAttr, removeClass, removeProp, show, text, toggle, toggleEnable, trigger, unbind;
      NsInternal = OJ.object();
      if (!isNode(NsNode)) {
        throw new TypeError("Cannot chain DOM methods without a Node.");
      }

      /*
      Region DOM Extension Methods
       */

      /*
      These are _THE_ mechanisms for building out the DOM.
      NS may later support *pend methods, but for now it's turtles all the way down.
       */
      NsNode.add("addChild", addChild = function(newNode) {
        return NsInternal.buildChildNode(newNode);
      });

      /*
      These are _THE_ mechanisms for building out the DOM.
      NS may later support *pend methods, but for now it's turtles all the way down.
       */
      NsNode.add("makeChild", makeChild = function(html) {
        if (OJ.is.string(html)) {
          return NsNode.append(html);
        }
      });
      NsInternal.buildChildNode = function(node) {
        if (!isNode(node)) {
          throw new TypeError("Argument called with invalid node.");
        }
        if (NsNode.rootNode) {
          node.rootNode = NsNode.rootNode;
        } else if (NsNode.parentNode) {
          node.rootNode = NsNode.parentNode;
        } else {
          node.rootNode = NsNode;
        }
        node.parentNode = NsNode;
        NsNode.append(node["?"]);
        NsNode.childNodes.push(node);

        /*
        To complete the loop, the newly appended node must be extended with the node.methods collectiom;
        which, in turn, will extend the node it receives with the elements factory.
         */
        return OJ.node.extendNode(node);
      };

      /*
      End Region DOM Extension Methods
       */

      /*
      Region Vendor Selector Methods
       */

      /*
      NS doesn't need many vendor selectors,
      but when it does they are sequestered on this property to "try" to avoid confusion.
       */
      el = OJ.object();
      el.add("children", children = function(searchTerm, selector) {
        var ret, _$children;
        ret = [];
        if (isNodeAlive(NsNode)) {
          _$children = NsNode["?"].children(OJ.to.string(searchTerm), OJ.to.string(selector));
          if (_$children) {
            _$children.each(function() {
              var childNode;
              el = this;
              childNode = OJ.nodes.make(el.id, el, _$(el));
              ret.push(childNode);
            });
          }
        }
        return ret;
      });
      el.add("filter", filter = function(selector) {
        var ret, _$children;
        ret = [];
        if (selector && isNodeAlive(NsNode)) {
          _$children = NsNode["?"].filter(selector);
          _$children.each(function() {
            var childNode;
            el = this;
            childNode = OJ.nodes.make(el.id, el, _$(el));
            ret.push(childNode);
          });
        }
        return ret;
      });
      el.add("find", find = function(selector) {
        var ret, _$children;
        ret = [];
        if (selector && isNodeAlive(NsNode)) {
          _$children = NsNode["?"].find(selector);
          if (_$children.length > 0) {
            _$children.each(function() {
              var childNode;
              el = this;
              childNode = OJ.nodes.make(el.id, el, _$(el));
              ret.push(childNode);
            });
          }
        }
        return ret;
      });
      el.add("first", first = function() {
        var ret;
        ret = NsNode.childNodes[0] || NsNode.el.children[0];
        return ret;
      });
      el.add("parent", parent = function() {
        var ret, _$parent;
        ret = {};
        if (isNodeAlive(NsNode)) {
          _$parent = NsNode["?"].parent();
          if (false === OJ.is.vendorObject(_$parent) && _$parent.length > 0) {
            ret = OJ.node.make(_$parent[0].id, _$parent[0], _$parent);
          }
        }
        return ret;
      });

      /*
      End Region Vendor Selector Methods
       */

      /*
      Region DOM Manipulation Methods
       */

      /*
      NS implements these wrappers around jQuery methods to provide better chaining on NS Nodes,
      as well as to make it easy to swap out the DOM framework without having to change the interfaces
       */
      NsNode.add("addClass", addClass = function(name) {
        if (name && isNodeAlive(NsNode)) {
          NsNode["?"].addClass(name);
        }
        return NsNode;
      });
      NsNode.add("append", append = function(object) {
        var ret;
        ret = NsNode;
        if (object && isNodeAlive(NsNode)) {
          if (OJ.is.vendorObject(object) || OJ.is.string(object)) {
            NsNode["?"].append(object);
          }
        }
        return ret;
      });
      NsNode.add("attr", attr = function(name, value) {
        var ret;
        ret = null;
        if (name && isNodeAlive(NsNode)) {
          ret = NsNode;
          if (OJ.is.plainObject(name)) {
            NsNode["?"].attr(name);
          } else if (arguments.length === 1) {
            ret = NsNode["?"].attr(name);
          } else {
            NsNode["?"].attr(name, value);
          }
        }
        return ret;
      });
      NsNode.add("bind", bind = function(eventName, event) {
        if (eventName && isNodeAlive(NsNode)) {
          NsNode["?"].on(eventName, event);
        }
        return NsNode;
      });
      NsNode.add("on", NsNode.bind);
      NsNode.add("clickOnEnter", clickOnEnter = function(anNsNode) {
        if (anNsNode && NsInternal.isNodeAlive()) {
          NsNode["?"].clickOnEnter(anNsNode["?"]);
        }
        return NsNode;
      });
      NsNode.add("css", css = function(param1, param2) {
        var ret;
        ret = NsNode;
        if (param1 && NsInternal.isNodeAlive()) {
          if (OJ.is.plainObject(param1)) {
            NsNode["?"].css(param1);
          } else if (arguments.length === 1) {
            ret = NsNode["?"].css(param1);
          } else {
            NsNode["?"].css(param1, param2);
          }
        }
        return ret;
      });
      NsNode.add("data", data = function(prop, val) {
        var ret;
        ret = "";
        if (prop && isNodeAlive(NsNode)) {
          if (OJ.is.plainObject(prop)) {
            setDataProperties(NsNode, NsInternal, prop);
          } else {
            switch (arguments.length) {
              case 1:
                ret = getDataProp(NsNode, NsInternal, prop);
                break;
              case 2:
                setDataProp(NsNode, NsInternal, prop, val);
                ret = NsNode;
            }
          }
        }
        return ret;
      });
      NsNode.add("disable", disable = function() {
        if (isNodeAlive(NsNode)) {
          NsInternal.enabled = false;
          NsNode.addClass("NsDisabled");
          NsNode.attr("disabled", "disabled");
        }
        return NsNode;
      });
      NsNode.add("empty", empty = function() {
        if (isNodeAlive(NsNode)) {
          NsNode["?"].empty();
          NsNode.childNodes = [];
        }
        return NsNode;
      });
      NsNode.add("enable", enable = function() {
        if (isNodeAlive(NsNode)) {
          NsInternal.enabled = true;
          NsNode.removeClass("NsDisabled");
          NsNode.removeAttr("disabled");
        }
        return NsNode;
      });
      NsNode.add("hide", hide = function() {
        if (isNodeAlive(NsNode)) {
          NsNode.addClass("NsHidden");
          NsNode["?"].hide();
        }
        return NsNode;
      });
      NsNode.add("prop", prop = function(name, value) {
        var ret;
        ret = null;
        if (name && isNodeAlive(NsNode)) {
          ret = NsNode;
          if (OJ.is.plainObject(name)) {
            NsNode["?"].prop(name);
          } else if (arguments.length === 1) {
            ret = NsNode["?"].prop(name);
          } else {
            NsNode["?"].prop(name, value);
          }
        }
        return ret;
      });
      NsNode.add("remove", remove = function() {
        if (NsNode && NsNode["?"]) {
          NsNode["?"].remove();
          NsNode.childNodes = [];
          NsNode = null;
        }
        return null;
      });
      NsNode.add("removeClass", removeClass = function(name) {
        if (name && isNodeAlive(NsNode)) {
          NsNode["?"].removeClass(name);
        }
        return NsNode;
      });
      NsNode.add("removeProp", removeProp = function(name) {
        if (name && isNodeAlive(NsNode)) {
          NsNode["?"].removeProp(name);
        }
        return NsNode;
      });
      NsNode.add("removeAttr", removeAttr = function(name) {
        if (name && isNodeAlive(NsNode)) {
          NsNode["?"].removeAttr(name);
        }
        return NsNode;
      });
      NsNode.add("show", show = function() {
        if (isNodeAlive(NsNode)) {
          NsNode.removeClass("NsHidden");
          NsNode["?"].show();
        }
        return NsNode;
      });
      NsNode.add("text", text = function(text) {
        if (text && isNodeAlive(NsNode)) {
          if (arguments.length === 1 && false === OJ.is.nullOrUndefined(text)) {
            NsNode["?"].text(text);
            return NsNode;
          } else {
            return OJ.to.string(NsNode["?"].text());
          }
        }
      });
      NsNode.add("toggle", toggle = function() {
        if (isNodeAlive(NsNode)) {
          NsNode["?"].toggle();
        }
        return NsNode;
      });
      NsNode.add("toggleEnable", toggleEnable = function() {
        if (isNodeAlive(NsNode)) {
          if (NsInternal.enabled) {
            NsNode.disable();
          } else {
            NsNode.enable();
          }
        }
        return NsNode;
      });
      NsNode.add("trigger", trigger = function(eventName, eventOpts) {
        if (eventName && isNodeAlive(NsNode)) {
          NsNode["?"].trigger(eventName, eventOpts);
        }
        return NsNode;
      });
      NsNode.add("unbind", unbind = function(eventName, event) {
        if (eventName && isNodeAlive(NsNode)) {
          NsNode["?"].off(eventName, event);
        }
        return NsNode;
      });
      NsNode.add("off", NsNode.unbind);

      /*
      Region DOM Manipulation Methods
       */
      return OJ.node.factory(NsNode);
    });

    /*
    Private, internal methods
     */
    isNode = function(nodeCandidate) {
      return nodeCandidate && OJ.is["instanceof"](OJ.metadata.Node, nodeCandidate);
    };

    /*
    Whether or no we have removed the node internally.
    This doesn't actually test the DOM,
    only our in-memory representation of the DOM.
     */
    isNodeAlive = function(NsNode) {
      return false === OJ.is.nullOrEmpty(NsNode) && isNode(NsNode);
    };
    getDataProp = function(NsNode, dataObj, propName) {
      var ret;
      ret = null;
      if (isNodeAlive(NsNode) && false === OJ.is.stringNullOrEmpty(propName)) {
        if (NsNode[0] && NsNode[0].dataset && NsNode[0].dataset[propName]) {
          ret = NsNode[0].dataset.propName;
        }
        if (OJ.is.stringNullOrEmpty(ret)) {
          ret = dataObj.data[propName] || NsNode["?"].data(propName) || OJ.localStorage.getItem(propName + "_control_data_ " + NsNode.getId());
        }
      }
      return ret;
    };
    setDataProp = function(NsNode, dataObj, propName, value) {
      var ret;
      ret = null;
      if (isNodeAlive() && false === OJ.is.stringNullOrEmpty(propName)) {
        ret = value;
        if (NsNode[0] && NsNode[0].dataset) {
          NsNode[0].dataset[propName] = value;
          dataObj.data[propName] = value;
        } else {
          dataObj.data[propName] = value;
          NsNode["?"].data(propName, value);
        }
      }
      return ret;
    };
    setDataProperties = function(NsNode, dataObj, obj) {
      if (obj && Object.keys(obj)) {
        OJ.each(function(key, val) {
          setDataProp(NsNode, dataObj, key, val);
        });
      }
    };
  })((typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ, (typeof global !== 'undefined' && global ? global : (typeof window !== 'undefined' ? window : this)).OJ["?"]);

}).call(this);

//# sourceMappingURL=domNode.map
